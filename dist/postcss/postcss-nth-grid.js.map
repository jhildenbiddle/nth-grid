{"version":3,"file":"postcss-nth-grid.js","sources":["../../src/postcss/lib/vars.js","../../src/postcss/util/get-number.js","../../src/postcss/util/get-unit.js","../../src/postcss/util/unit-math.js","../../src/postcss/util/get-order-offset.js","../../src/postcss/util/is-unit-match.js","../../src/postcss/lib/grid.js","../../src/postcss/util/append-selectors.js","../../src/postcss/util/round.js","../../src/postcss/lib/grid-columns.js","../../src/postcss/lib/grid-container.js","../../src/postcss/lib/grid-debug.js","../../src/postcss/lib/grid-overlay.js","../../src/postcss/util/normalize.js","../../src/postcss/index.js"],"sourcesContent":["// Exports\n// =============================================================================\nexport default {\n    // reNotLength: /[^\\w\\%\\.\\-]/,\n    reNotLength: /[^\\w%.-]/,\n    reNumber   : /^[-+]?[0-9]*\\.?[0-9]+/,\n    reUnit     : /[a-z|%]+$/,\n    rounding   : 5\n};\n","// Dependencies\n// =============================================================================\nimport vars from '../lib/vars';\n\n\n// Exports\n// =============================================================================\n// Get number in string (e.g. '12rem' => 12)\nexport default function(value, falseValue) {\n    if (vars.reNotLength.test(value)) {\n        return false;\n    }\n    else {\n        const match  = value.toString().match(vars.reNumber) || false;\n        const number = match.length ? Number(match) * 1 : falseValue || false;\n\n        return number;\n    }\n}\n","// Dependencies\n// =============================================================================\nimport vars from '../lib/vars';\n\n\n// Exports\n// =============================================================================\n// Get unit in string (e.g. '12rem' => 'rem')\nexport default function(value, falseValue) {\n    if (vars.reNotLength.test(value)) {\n        return false;\n    }\n    else {\n        const match = value.toString().match(vars.reUnit) || false;\n        const unit  = match.length ? match.toString() : falseValue || false;\n\n        return unit;\n    }\n}\n","// Dependencies\n// =============================================================================\nimport getNumber from './get-number';\nimport getUnit   from './get-unit';\n\n\n// Functions\n// =============================================================================\n// Calculates string as mathematical expression. Used instead of eval to avoid\n// console warning on compilation.\nfunction stringMath(expression) {\n    return new Function('return ' + expression)();\n}\n\n\n// Exports\n// =============================================================================\n// Allows for basic math on string lengths (numbers with with units)\n// Ex: unitMath(['1rem', '1rem'], ' + ') /* '2rem' */\nexport default function(arr, operator) {\n    let   finalUnit = '';\n    const nums      = [];\n\n    // Loop through array values\n    for (let i = 0; i < arr.length; i++) {\n        const num  = getNumber(arr[i]);\n        const unit = getUnit(arr[i]);\n\n        // Ignore zero value units\n        if (num !== 0) {\n            // Verify math compatibility and store unit\n            if (unit.length) {\n                if (finalUnit.length && unit !== finalUnit) {\n                    // eslint-disable-next-line\n                    console.log(`NTH-GRID: Incompatible unitMath() arguments: ${arr}`);\n\n                    return 0;\n                }\n                else {\n                    finalUnit = unit;\n                }\n            }\n        }\n\n        // Add item to numbers array\n        nums.push(num);\n    }\n\n    // Cleanse operator\n    operator = operator.trim().replace(/[^+\\-*/().\\d\\s]/g, '');\n\n    // Calculate result\n    const result = nums.length ? stringMath(nums.join(operator)).toString().concat(finalUnit) : 0; // jshint ignore:line\n\n    // Convert zero to number\n    return Number(result) === 0 ? 0 : result;\n}\n","// Dependencies\n// =============================================================================\nimport unitMath from '../util/unit-math';\n\n// Exports\n// =============================================================================\n// Calculates columns offset for source ordering.\n// Note that IE9 truncates css values after 128 characters. Grid columms\n// that require an offset using a calc() string longer than this will\n// not render properly.\nexport default function(settings, column, order) {\n    let offset = 0, i;\n\n    // Only columns following the first need offset calculated\n    if (column > 1) {\n        let sibling_val;\n\n        // Calc() required\n        if (settings.calc) {\n            // Store sibling ratio column and gap counts.\n            // Used to generate the shortest possible calc() strings\n            const offset_vals       = [];\n            let sibling_gaps        = 0;\n            let sibling_ratio_cols  = 0;\n            const sibling_unit_cols = [];\n\n            // Loop through all preceding columns\n            for (i = 0; i < (column - 1); i++) {\n                // Get sibling values from columns_normalized or order\n                if (order) {\n                    sibling_val = settings.columns_normalized[order[i] - 1];\n                }\n                else {\n                    sibling_val = settings.columns_normalized[i];\n                }\n\n                // Gap\n                if (settings.gap_h !== 0) {\n                    sibling_gaps += 1;\n                }\n\n                // Ratio-based value\n                if (Number(sibling_val)) {\n                    sibling_ratio_cols += Number(sibling_val);\n                }\n                // Unit-based value\n                else {\n                    sibling_unit_cols.push(sibling_val);\n                }\n            }\n\n            // Ratio offset\n            if (sibling_ratio_cols > 0) {\n                if (sibling_ratio_cols === 1) {\n                    offset_vals.push(settings.grid_col_width);\n                }\n                else {\n                    offset_vals.push('((' + settings.grid_col_width + ') * ' + sibling_ratio_cols + ')');\n                }\n            }\n\n            // Unit offset\n            if (sibling_unit_cols.length > 0) {\n                offset_vals.push(sibling_unit_cols.join(' + '));\n            }\n\n            // Gap offset\n            if (sibling_gaps > 0) {\n                if (sibling_gaps === 1) {\n                    offset_vals.push(settings.gap_h);\n                }\n                else {\n                    offset_vals.push('(' + settings.gap_h + ' * ' + sibling_gaps + ')');\n                }\n            }\n\n            // Final offset\n            offset = offset_vals.join(' + ');\n        }\n        // Calc() not required\n        else {\n            let column_width;\n\n            // Loop through all preceding columns\n            for (i = 0; i < (column - 1); i++) {\n                // Get sibling values from columns_normalized or order\n                if (order) {\n                    sibling_val = settings.columns_normalized[order[i] - 1];\n                }\n                else {\n                    sibling_val = settings.columns_normalized[i];\n                }\n\n                // Add ratio-based value\n                if (Number(sibling_val)) {\n                    const grid_col_width = settings.grid_col_width;\n\n                    column_width = unitMath([grid_col_width, sibling_val], ' * ');\n                    offset       = unitMath([offset, column_width, settings.gap_h], ' + ');\n                }\n                // Add unit-based value\n                else {\n                    column_width = unitMath([sibling_val, settings.gap_h], ' + ');\n                    offset       = unitMath([offset, column_width], ' + ');\n                }\n            }\n        }\n    }\n\n    return offset;\n}\n","// Dependencies\n// =============================================================================\nimport getNumber from './get-number';\nimport getUnit   from './get-unit';\n\n\n// Exports\n// =============================================================================\n// Compare units of array items, ignoring zero values w/o units\nexport default function(arr, matchUnit) {\n    // Return false if value os not a valid length (e.g. calc)\n    if (!getNumber(arr[0]) && !getUnit(arr[0])) {\n        return false;\n    }\n    // Get matching unit from first item if unspecified\n    else if (!matchUnit) {\n        matchUnit = getUnit(arr[0]);\n    }\n\n    // Loop through array values\n    for (let i = 0; i < arr.length; i++) {\n        const num  = getNumber(arr[i]);\n        const unit = num !== 0 ? getUnit(arr[i]) : false;\n\n        // Return false if value is not a valid length (e.g. calc)\n        if (num === false && unit === false) {\n            return false;\n        }\n        // Return false if units do not match\n        if (num !== 0 && unit !== matchUnit) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","// Dependencies\n// =============================================================================\nimport getOrderOffset from '../util/get-order-offset';\nimport getUnit        from '../util/get-unit';\nimport isUnitMatch    from '../util/is-unit-match';\nimport unitMath       from '../util/unit-math';\n\n\n// Exports\n// =============================================================================\n// Generates new object containing grid properties\nexport default function Grid(settings, options) {\n    options = options || {};\n\n    // Protect against instantiating without `new` keyword\n    if (!(this instanceof Grid)) {\n        return new Grid(settings, options);\n    }\n\n    // Nth-Grid Defaults\n    const defaults = {\n        // Layout\n        columns               : [1],\n        gap                   : 0,\n        margin                : 0,\n        center                : true,\n        eqheight              : false,\n        valign                : false,\n        direction             : 'ltr',\n        legacy                : false,\n\n        // Debug\n        debug                 : false,\n        debug_background_color: '#000',\n        debug_text_color      : '#ccc',\n\n        // Overlay\n        overlay               : false,\n        overlay_column_color  : '#7c48c3',\n        overlay_margin_color  : '#dabfff',\n        overlay_text_color    : '#fff',\n\n        // Compilation\n        rem_base              : 16,\n        remove_warnings       : true,\n        warnings              : true\n    };\n\n    // Private defaults\n    const settings_private = {\n        width                 : '100%',\n        order                 : false,\n        auto_width            : null,\n        calc                  : null,\n        columns_ratio         : [],\n        columns_unit          : [],\n        grid_col_ratio        : 0,\n        grid_col_width        : 0,\n        grid_width            : null,\n        gap_h                 : 0,\n        columns_normalized    : [],\n        margin_h              : 0,\n        order_offsets         : [],\n        total_columns         : 0,\n        total_ratio_columns   : 0,\n        total_unit_columns    : 0\n    };\n\n    // Update defaults with global options\n    for (const opt in options) {\n        if (opt in defaults) {\n            defaults[opt] = options[opt];\n        }\n    }\n\n    // Add private properties to settings\n    // Adding these after the global options prevents setting private\n    // settings via CSS or JS globals\n    for (const priv in settings_private) {\n        if (!(priv in settings)) {\n            settings[priv] = settings_private[priv];\n        }\n    }\n\n    // Add missing properties from defaults to settings\n    for (const key in defaults) {\n        if (!(key in settings)) {\n            settings[key] = defaults[key];\n        }\n    }\n\n    // Convert single-value columns layout and order settings to arrays\n    settings.columns = settings.columns instanceof Array ? settings.columns : [settings.columns];\n    settings.order = settings.order instanceof Array ? settings.order : settings.order !== false ? [settings.order] : settings.order;\n\n    // Extract horizontal gap and margin from arrays\n    settings.gap_h = settings.gap instanceof Array ? (settings.gap[1] || settings.gap[0]) : settings.gap;\n    settings.gap_v = settings.gap instanceof Array ? settings.gap[0] : settings.gap;\n    settings.margin_h = settings.margin instanceof Array ? (settings.margin[1] || settings.margin[0]) : settings.margin;\n    settings.margin_v = settings.margin instanceof Array ? settings.margin[0] : settings.margin;\n\n    // Direction\n    settings.dir_left  = settings.direction === 'rtl' ? 'right' : 'left';\n    settings.dir_right = settings.direction === 'rtl' ? 'left' : 'right';\n\n\n    // Populate settings\n    // ---------------------------------------------------------------------\n    let i;\n\n    // Ratio- and unit-based column lists\n    for (i = 0; i < settings.columns.length; i++) {\n        const val = settings.columns[i];\n\n        if (Number(val)) {\n            settings.columns_ratio.push(Number(val));\n        }\n        else {\n            settings.columns_unit.push(val);\n        }\n    }\n\n    // Total column count\n    settings.total_ratio_columns = settings.columns_ratio.length === 1 ? settings.columns_ratio[0] : settings.columns_ratio.length;\n    settings.total_unit_columns  = settings.columns_unit.length;\n    settings.total_columns       = settings.total_ratio_columns + settings.total_unit_columns;\n\n    // Calculate combined grid gap and margin\n    let grid_gaps = unitMath([settings.gap_h, (settings.total_columns - 1)], ' * '),\n        grid_margins = unitMath([settings.margin_h, 2], ' * ');\n\n    // Grid ratio\n    if (settings.columns_ratio.length === 1) {\n        settings.grid_col_ratio = settings.columns_ratio[0];\n    }\n    else {\n        settings.grid_col_ratio = 0;\n\n        // Sum ratio based column values\n        for (i = 0; i < settings.columns_ratio.length; i++) {\n            settings.grid_col_ratio += settings.columns_ratio[i];\n        }\n    }\n\n    // Are all units matched?\n    const isMatched = isUnitMatch([]\n        .concat(settings.width)\n        .concat(settings.columns_unit)\n        .concat(settings.gap)\n        .concat(settings.margin));\n\n    // All all grid units matched?\n    const isMatchedGrid = settings.columns_ratio.length === 0 && isUnitMatch([]\n        .concat(settings.columns_unit)\n        .concat(settings.gap)\n        .concat(settings.margin));\n\n    // Are all grid values percent?\n    const isPercentGrid = isUnitMatch([]\n        .concat(settings.columns_unit)\n        .concat(settings.gap)\n        .concat(settings.margin), '%');\n\n    // Calc() required?\n    settings.calc = !(isMatched || isMatchedGrid || isPercentGrid);\n\n    // Grid container auto width\n    if (settings.columns_ratio.length === 0) {\n        // Calc() required\n        if (settings.calc) {\n            const grid_unit_cols = isUnitMatch(settings.columns_unit) ? unitMath(settings.columns_unit, ' + ') : settings.columns_unit.join(' + ');\n\n            // Matched gap & margin units\n            if (settings.gap_h !== 0 && settings.margin_h !== 0 && isUnitMatch([grid_gaps, grid_margins])) {\n                settings.auto_width = grid_unit_cols + ' + ' + unitMath([grid_gaps, grid_margins], ' + ');\n            }\n            // Matched column and gap units\n            else if (settings.gap_h !== 0 && isUnitMatch([grid_unit_cols, grid_gaps])) {\n                settings.auto_width = unitMath([grid_unit_cols, grid_gaps], ' + ') + ' + ' + (settings.margin_h !== 0 ? grid_margins : '');\n            }\n            // Matched column and margin units\n            else if (settings.margin_h !== 0 && isUnitMatch([grid_unit_cols, grid_margins])) {\n                settings.auto_width = unitMath([grid_unit_cols, grid_margins], ' + ') + ' + ' + (settings.gap_h !== 0 ? grid_gaps : '');\n            }\n            // No match\n            else {\n                settings.auto_width = grid_unit_cols;\n\n                // Add gaps\n                if (settings.gap_h !== 0) {\n                    settings.auto_width += ' + ' + grid_gaps;\n                }\n\n                // Add margins\n                if (settings.margin_h !== 0) {\n                    settings.auto_width += ' + ' + grid_margins;\n                }\n            }\n        }\n        // Calc() not required\n        else {\n            // Unit-based columns\n            settings.auto_width = unitMath(settings.columns_unit, ' + ');\n\n            // Add gaps and margins\n            settings.auto_width = unitMath([settings.auto_width, grid_gaps, grid_margins], ' + ');\n        }\n    }\n\n    // Ratio grid width - Calc() required\n    // Grid width of 99.99% used for sub-pixel rendering bug (e.g. IE9, Chrome < 38)\n    if (settings.calc) {\n        // Single unit-based column\n        if (settings.columns_unit.length === 1) {\n            settings.grid_width = '99.99% - ' + settings.columns_unit[0];\n        }\n        // Multiple unit-based columns\n        else if (settings.columns_unit.length > 1) {\n            // Matched units\n            if (isUnitMatch(settings.columns_unit)) {\n                settings.grid_width = '99.99% - ' + unitMath(settings.columns_unit, ' + ');\n            }\n            // Mixed units\n            else {\n                settings.grid_width = '99.99% - (' + settings.columns_unit.join(' + ') + ')';\n            }\n        }\n        // No unit-based columns\n        else {\n            settings.grid_width = '99.99%';\n        }\n    }\n    // Ratio grid width - Calc() not required\n    else {\n        if (isMatched && getUnit(settings.width) !== '%') {\n            settings.grid_width = settings.width;\n\n            // Subtract unit-based column values from width\n            if (settings.columns_unit.length) {\n                settings.grid_width = unitMath([settings.grid_width, unitMath(settings.columns_unit, ' + ')], ' - ');\n            }\n        }\n        else if (isPercentGrid) {\n            settings.grid_width = '100%';\n\n            // Subtract unit-based column values from width\n            if (settings.columns_unit.length) {\n                settings.grid_width = unitMath([settings.grid_width, unitMath(settings.columns_unit, ' + ')], ' - ');\n            }\n        }\n        else {\n            settings.grid_width = '100%';\n        }\n    }\n\n    // Ratio-based column width\n    if (settings.total_ratio_columns > 0) {\n        // Calc() required\n        if (settings.calc) {\n            // Matched gap and margin units\n            if (settings.gap_h !== 0 && settings.margin_h !== 0 && isUnitMatch([settings.gap_h, settings.margin_h])) {\n                settings.grid_col_width = settings.grid_width + ' - ' + unitMath([grid_gaps, grid_margins], ' + ');\n            }\n            // Matched column and gap units\n            else if (settings.gap_h !== 0 && isUnitMatch([settings.grid_width, grid_gaps])) {\n                settings.grid_col_width = unitMath([settings.grid_width, grid_gaps], ' - ');\n\n                if (grid_margins !== 0) {\n                    settings.grid_col_width += ' - ' + grid_margins;\n                }\n            }\n            // Matched column and margin units\n            else if (settings.margin_h !== 0 && isUnitMatch([settings.grid_width, grid_margins])) {\n                settings.grid_col_width = unitMath([settings.grid_width, grid_margins], ' - ');\n\n                if (grid_gaps !== 0) {\n                    settings.grid_col_width += ' - ' + grid_gaps;\n                }\n            }\n            // No match\n            else {\n                grid_gaps = settings.gap_h !== 0 ? ' - ' + grid_gaps : '';\n                grid_margins = settings.margin_h !== 0 ? ' - ' + grid_margins : '';\n\n                settings.grid_col_width = settings.grid_width + grid_gaps + grid_margins;\n            }\n\n            // Divide by grid ratio\n            settings.grid_col_width = '(' + settings.grid_col_width + ') / ' + settings.grid_col_ratio;\n        }\n        // Calc() not required\n        else {\n            // Calculate grid width without gaps and margins\n            settings.grid_col_width = unitMath([settings.grid_width, grid_gaps, grid_margins], ' - ');\n\n            // Divide by grid ratio\n            settings.grid_col_width = unitMath([settings.grid_col_width, settings.grid_col_ratio], ' / ');\n        }\n    }\n\n    // Calculate ordered column offsets\n    if (settings.order && settings.order.length <= settings.total_columns) {\n        // Expand single ratio-value column to multi-column\n        // Ex: nth-grid(6) /* columns_normalized: 1 1 1 1 1 1 */\n        if (settings.columns_ratio.length === 1) {\n            for (i = 0; i < settings.columns.length; i++) {\n                const col_val = settings.columns[i];\n                const num     = Number(col_val) || false;\n\n                // Single ratio-based value\n                if (num) {\n                    for (let j = 0; j < num; j++) {\n                        settings.columns_normalized.push(1);\n                    }\n                }\n                // Other values\n                else {\n                    settings.columns_normalized.push(col_val);\n                }\n            }\n        }\n        else {\n            settings.columns_normalized = settings.columns;\n        }\n\n        // Loop through order\n        for (i = 0; i < settings.order.length; i++) {\n            let offset    = 0;\n            const order_val = settings.order[i];\n\n            // Get offset of the order column value in the original column layout\n            // Ex: Column 3 offset in original @columns\n            const column_offset = getOrderOffset(settings, order_val);\n\n            // Get offset of the order column number in the ordered column layout\n            // Ex: Column 3 offset in $order 3 2 1 (1st position)\n            const order_offset = getOrderOffset(settings, i + 1, settings.order);\n\n            // Set final offset values in array\n            if (order_offset !== column_offset) {\n                // Calc() required\n                if (settings.calc) {\n                    if (order_offset === 0) {\n                        offset = '0px - (' + column_offset + ')';\n                    }\n                    else if (column_offset === 0) {\n                        offset = order_offset;\n                    }\n                    else {\n                        offset = '(' + order_offset + ') - (' + column_offset + ')';\n                    }\n                }\n                // Calc() not required\n                else {\n                    offset = unitMath([order_offset, column_offset], ' - ');\n                }\n            }\n\n            // Push value to order offset array\n            settings.order_offsets.push(offset);\n        }\n    }\n\n    // Return settings object\n    return settings;\n}\n","// Exports\n// =============================================================================\n// Appends content to comma-separated selector strings\nexport default function(selectorList, appendText) {\n    return selectorList.split(',').map(function(selector) {\n        return selector.trim() + appendText;\n    });\n}\n","// Dependencies\n// =============================================================================\nimport getNumber from './get-number';\nimport getUnit   from './get-unit';\nimport vars      from '../lib/vars';\n\n\n// Exports\n// =============================================================================\n// Round value to specified decimal places\nexport default function(val, decimals) {\n    decimals = decimals || vars.rounding;\n\n    let   num  = getNumber(val);\n    const unit = getUnit(val);\n\n    // Only use toFixed() if length if greater than decimals\n    if (num.toString().match(/\\d/g).length > decimals) {\n        num = Number(Math.round(num + 'e' + decimals) + 'e-' + decimals);\n    }\n\n    return unit ? num.toString() + unit : num;\n}\n","// Dependencies\n// =============================================================================\nimport postcss         from 'postcss';\nimport appendSelectors from '../util/append-selectors';\nimport round           from '../util/round';\nimport unitMath        from '../util/unit-math';\n\n\n// Functions\n// =============================================================================\n// Generates overly content rule\nfunction overlayContent(grid, selector, container, content) {\n    if (grid.overlay) {\n        const selectorBefore = selector.map(function(sel) {\n            return sel.trim() + ':before';\n        });\n\n        container.append(\n            postcss.rule(\n                { selector: selectorBefore }\n            ).append(\n                { prop: 'content', value: '\"' + content + '\" !important'}\n            )\n        );\n    }\n}\n\n\n// Exports\n// =============================================================================\n// Generates css for grid columns\nexport default function gridColumns(grid, nthSelector, selectorContainer, siblingContainer) {\n    let newRule;\n\n    // Legacy warning\n    if (grid.legacy === true && grid.calc === true && grid.warnings ===  true) {\n        // eslint-disable-next-line\n        console.warn(`NTH-GRID: \"${nthSelector}\" requires calc() support. This grid will not render properly in legacy browsers.`);\n    }\n\n    // All columns (low specificity)\n    // -------------------------------------------------------------------------\n    siblingContainer.append(\n        postcss.rule(\n            { selector: appendSelectors(nthSelector, ' > *') }\n        ).append(\n            { prop: 'display', value: 'block' },\n            { prop: 'box-sizing', value: 'border-box' }\n        )\n    );\n\n    // All columns (nth specificity)\n    // -------------------------------------------------------------------------\n    newRule = postcss.rule(\n        { selector: appendSelectors(nthSelector, ' > *:nth-child(1n)') }\n    ).append(\n        { prop: 'float', value: grid.dir_left },\n        { prop: 'clear', value: 'none' },\n        { prop: 'position', value: 'static' },\n        { prop: grid.dir_left, value: 'auto' },\n        { prop: 'margin-' + grid.dir_right, value: '0' },\n        // Gap - Vertical\n        { prop: 'margin-top', value: grid.gap_v },\n        // Gap - Horizontal\n        { prop: 'margin-' + grid.dir_left, value: grid.gap_h }\n    );\n\n    if (grid.legacy === true) {\n        // IE7 float fix\n        newRule.append(\n            { prop: '*display', value: 'inline' },\n            { prop: '*float', value: 'none' },\n            { prop: '*vertical-align', value: 'top' },\n            { prop: '*zoom', value: '1' }\n        );\n    }\n\n    siblingContainer.append(newRule);\n\n    // All columns in first row\n    // -------------------------------------------------------------------------\n    siblingContainer.append(\n        postcss.rule(\n            { selector: appendSelectors(nthSelector, ' > *:nth-child(-n + ' + grid.total_columns + ')') }\n        ).append(\n            { prop: 'margin-top', value: grid.margin_v }\n        )\n    );\n\n    if (grid.legacy === true && grid.margin_h === 0) {\n        siblingContainer.append(\n            // Last column in each row\n            postcss.rule(\n                { selector: appendSelectors(nthSelector, ' > *:nth-child(' + grid.total_columns + 'n)') }\n            ).append(\n                // IE7 sub-pixel rounding fix\n                { prop: '*margin-' + grid.dir_right, value: '-2px' }\n            )\n        );\n    }\n\n    // First column each row\n    // -------------------------------------------------------------------------\n    siblingContainer.append(\n        postcss.rule(\n            { selector: appendSelectors(nthSelector, ' > *:nth-child(' + grid.total_columns + 'n + 1)') }\n        ).append(\n            { prop: 'clear', value: grid.dir_left },\n            { prop: 'margin-' + grid.dir_left, value: grid.margin_h }\n        )\n    );\n\n    // All columns in last row\n    // -------------------------------------------------------------------------\n    newRule = postcss.rule(\n        { selector: appendSelectors(nthSelector, ' > *:nth-last-child(-n + ' + grid.total_columns + ')') }\n    );\n\n    // Margin - Vertical\n    if (grid.margin_v === 0) {\n        newRule.append(\n            { prop: 'margin-bottom', value: '0' }\n        );\n    }\n    // Calc used to target modern browsers because Selectivizr does\n    // not properly match this selector using NWMatcher (it does match\n    // properly with jQuery). Entire row must be targeted to ensure\n    // proper alignment when vertical alignment option is used.\n    else {\n        newRule.append(\n            { prop: 'margin-bottom', value: 'calc(' + grid.margin_v + ')' }\n        );\n    }\n\n    siblingContainer.append(newRule);\n\n    if (grid.legacy === true) {\n        // Last child serving as \"last row\" for selectivir compatibility.\n        // Only one element in the last row is needed for vertical margin\n        // since vertical alignment (via flexbox) is not an issue.\n        siblingContainer.append(\n            postcss.rule(\n                { selector: appendSelectors(nthSelector, ' > *:last-child') }\n            ).append(\n                { prop: 'margin-bottom', value: grid.margin_v }\n            )\n        );\n    }\n\n    // Width: Unit-based column(s) only\n    // -------------------------------------------------------------------------\n    if (grid.columns_ratio.length === 0) {\n        grid.columns.forEach(function(columnVal, i) {\n            i++;\n\n            newRule = postcss.rule(\n                { selector: appendSelectors(nthSelector, ' > *:nth-child(' + grid.total_columns + 'n + ' + i + ')') }\n            ).append(\n                { prop: 'width', value: columnVal }\n            );\n\n            siblingContainer.append(newRule);\n\n            // Grid overlay\n            overlayContent(grid, newRule.selector, siblingContainer, columnVal);\n        });\n    }\n\n    // Width: Single ratio-based value\n    // -------------------------------------------------------------------------\n    else if (grid.columns_ratio.length === 1) {\n        // Ratio-based column\n        newRule = postcss.rule(\n            { selector: appendSelectors(nthSelector, ' > *:nth-child(1n)') }\n        );\n\n        // Calc() required\n        if (grid.calc) {\n            siblingContainer.append(\n                newRule.append(\n                    { prop: 'width', value: 'calc(' + grid.grid_col_width + ')'}\n                )\n            );\n\n            // Grid overlay\n            overlayContent(grid, newRule.selector, siblingContainer, '1/' + grid.grid_col_ratio + ' (calc)');\n        }\n        // Calc() not required\n        else {\n            siblingContainer.append(\n                newRule.append(\n                    { prop: 'width', value: round(grid.grid_col_width)}\n                )\n            );\n\n            // Grid overlay\n            overlayContent(grid, newRule.selector, siblingContainer, '1/' + grid.grid_col_ratio + ' (' + round(grid.grid_col_width, 2) + ')');\n        }\n\n        // Unit-based column(s)\n        if (grid.columns_unit.length > 0) {\n            grid.columns.forEach(function(columnVal, i) {\n                columnVal = Number(columnVal) || columnVal;\n\n                if (columnVal !== grid.total_ratio_columns) {\n                    const nthCol = i > grid.columns.indexOf(grid.total_ratio_columns) ? i + grid.total_ratio_columns : i + 1;\n\n                    newRule = postcss.rule(\n                        { selector: appendSelectors(nthSelector, ' > *:nth-child(' + grid.total_columns + 'n + ' + nthCol + ')') }\n                    ).append(\n                        { prop: 'width', value: columnVal }\n                    );\n\n                    siblingContainer.append(newRule);\n\n                    // Grid overlay\n                    overlayContent(grid, newRule.selector, siblingContainer, columnVal);\n                }\n            });\n        }\n    }\n\n    // Width: Mutiple ratio-based values\n    // -------------------------------------------------------------------------\n    else {\n        grid.columns.forEach(function(columnVal, i) {\n            i++;\n\n            const newRule = postcss.rule(\n                { selector: appendSelectors(nthSelector, ' > *:nth-child(' + grid.total_columns + 'n + ' + i + ')') }\n            );\n\n            // Ratio-based column\n            if (Number(columnVal)) {\n                // Calc() required\n                if (grid.calc) {\n                    siblingContainer.append(\n                        newRule.append(\n                            { prop: 'width', value: 'calc((' + grid.grid_col_width + ') * ' + columnVal + ')' }\n                        )\n                    );\n\n                    // Grid overlay\n                    overlayContent(grid, newRule.selector, siblingContainer, columnVal + '/' + grid.grid_col_ratio + ' (calc)');\n                }\n                // Calc() not required\n                else {\n                    const columnWidth = round(unitMath([grid.grid_col_width, columnVal], ' * '));\n\n                    siblingContainer.append(\n                        newRule.append(\n                            { prop: 'width', value: columnWidth }\n                        )\n                    );\n\n                    // Grid overlay\n                    overlayContent(grid, newRule.selector, siblingContainer, columnVal + '/' + grid.grid_col_ratio + ' (' + round(columnWidth, 2) + ')');\n                }\n            }\n            // Unit-based columns\n            else {\n                siblingContainer.append(\n                    newRule.append(\n                        { prop: 'width', value: columnVal }\n                    )\n                );\n\n                // Grid overlay\n                overlayContent(grid, newRule.selector, siblingContainer, columnVal);\n            }\n        });\n    }\n\n    // Order\n    // -------------------------------------------------------------------------\n    // Invalid order\n    if (grid.order && grid.order.length > grid.total_columns) {\n        if (grid.warnings ===  true) {\n            // eslint-disable-next-line\n            console.warn(`NTH-GRID: \"${nthSelector}\" order [${grid.order}] exceeds total column count of ${grid.total_columns} for columns [${grid.columns}]. Order not applied.`);\n        }\n    }\n    // Valid order\n    else if (grid.order_offsets.length) {\n        grid.order_offsets.forEach(function(offset, i) {\n            const orderVal = grid.order[i];\n\n            if (offset !== 0) {\n                siblingContainer.append(\n                    postcss.rule(\n                        { selector: appendSelectors(nthSelector, ' > *:nth-child(' + grid.total_columns + 'n + ' + orderVal + ')') }\n                    ).append(\n                        { prop: 'position', value: 'relative' },\n                        { prop: grid.dir_left, value: grid.calc ? 'calc(' + offset + ')' : round(offset) }\n                    )\n                );\n            }\n        });\n    }\n}\n","// Dependencies\n// =============================================================================\nimport postcss         from 'postcss';\nimport appendSelectors from '../util/append-selectors';\n\n\n// Exports\n// =============================================================================\n// Generates css for grid container\nexport default function gridContainer(grid, nthSelector, selectorContainer, siblingContainer) {\n    selectorContainer.append(\n        { prop: 'display', value: 'block' }\n    );\n\n    // Legacy\n    if (grid.legacy === true) {\n        // IE7 double padding fix\n        selectorContainer.append({ prop: '*display', value: 'inline-block' });\n    }\n\n    // Legacy\n    if (grid.legacy === true && grid.order) {\n        // IE7 relative position fix\n        selectorContainer.append({ prop: '*position', value: 'relative' });\n    }\n\n    // Box sizing\n    if (grid.total_ratio_columns === 0) {\n        // Allow for borders when auto-width has been applied\n        selectorContainer.append({ prop: 'box-sizing', value: 'content-box' });\n    }\n    else {\n        // Allow for borders when auto-width has been applied\n        selectorContainer.append({ prop: 'box-sizing', value: 'border-box' });\n    }\n\n    // Flexbox\n    if (grid.eqheight === true || grid.valign === 'top' || grid.valign === 'center' || grid.valign === 'middle' || grid.valign === 'bottom') {\n        selectorContainer.append(\n            { prop: 'display', value: '-webkit-box' },\n            { prop: 'display', value: '-webkit-flex' },\n            { prop: 'display', value: '-ms-flexbox' },\n            { prop: 'display', value: 'flex' },\n            { prop: '-webkit-flex-wrap', value: 'wrap' },\n            { prop: '-ms-flex-wrap', value: 'wrap' },\n            { prop: 'flex-wrap', value: 'wrap' }\n        );\n\n        // Equal-height columns\n        if (grid.eqheight === true) {\n            // Legacy warning\n            if (grid.legacy === true && grid.warnings === true) {\n                // eslint-disable-next-line\n                console.warn(`NTH-GRID: \"${nthSelector}\" requires flexbox support for equal-height columns. This feature is not supported by legacy browsers.`);\n            }\n        }\n        // Vertical alignment\n        else {\n            // Legacy warning\n            if (grid.legacy === true && grid.warnings === true) {\n                // eslint-disable-next-line\n                console.warn(`NTH-GRID: \"${nthSelector}\" requires flexbox support for vertical alignment. This feature is not supported by legacy browsers.`);\n            }\n            if (grid.valign === 'top') {\n                selectorContainer.append(\n                    { prop: '-webkit-box-align', value: 'start' },\n                    { prop: '-webkit-align-items', value: 'flex-start' },\n                    { prop: '-ms-flex-align', value: 'start' },\n                    { prop: 'align-items', value: 'flex-start' }\n                );\n            }\n            if (grid.valign === 'center' || grid.valign === 'middle') {\n                selectorContainer.append(\n                    { prop: '-webkit-box-align', value: 'center' },\n                    { prop: '-webkit-align-items', value: 'center' },\n                    { prop: '-ms-flex-align', value: 'center' },\n                    { prop: 'align-items', value: 'center' }\n                );\n            }\n            if (grid.valign === 'bottom') {\n                selectorContainer.append(\n                    { prop: '-webkit-box-align', value: 'end' },\n                    { prop: '-webkit-align-items', value: 'flex-end' },\n                    { prop: '-ms-flex-align', value: 'end' },\n                    { prop: 'align-items', value: 'flex-end' }\n                );\n            }\n        }\n\n        // Direction\n        if (grid.direction === 'rtl') {\n            selectorContainer.append(\n                { prop: '-webkit-box-orient', value: 'horizontal' },\n                { prop: '-webkit-box-direction', value: 'reverse' },\n                { prop: '-webkit-flex-direction', value: 'row-reverse' },\n                { prop: '-ms-flex-direction', value: 'row-reverse' },\n                { prop: 'flex-direction', value: 'row-reverse' }\n            );\n        }\n    }\n\n    // Width\n    if (grid.total_ratio_columns === 0 && grid.calc === true) {\n        selectorContainer.append({ prop: 'width', value: 'calc(' + grid.auto_width + ')' });\n    }\n    else if (grid.total_ratio_columns === 0) {\n        selectorContainer.append({ prop: 'width', value: grid.auto_width });\n    }\n    else if (grid.width !== '100%') {\n        selectorContainer.append({ prop: 'width', value: grid.width });\n    }\n    else {\n        selectorContainer.append({ prop: 'width', value: 'auto' });\n    }\n\n    // Centering\n    selectorContainer.append (\n        { prop: 'margin-right', value: grid.center === true ? 'auto' : 0 },\n        { prop: 'margin-left', value: grid.center === true ? 'auto' : 0 }\n    );\n\n    // Clearfix\n    siblingContainer.append(\n        postcss.rule(\n            { selector: appendSelectors(nthSelector, ':after') }\n        ).append(\n            { prop: 'content', value: '\\'\\'' },\n            { prop: 'display', value: 'table' },\n            { prop: 'clear', value: 'both' }\n        )\n    );\n}\n","// Dependencies\n// =============================================================================\nimport postcss         from 'postcss';\nimport appendSelectors from '../util/append-selectors';\n\n\n// Exports\n// =============================================================================\n// Generates debug css for grid container and columns\nexport default function gridDebug(grid, nthSelector, selectorContainer, siblingContainer) {\n    if (grid.debug) {\n        const debugContent = [\n            'columns            : ' + grid.columns,\n            'gap                : ' + grid.gap,\n            'margin             : ' + grid.margin,\n            'width              : ' + grid.width,\n            'order              : ' + grid.order,\n            'center             : ' + grid.center,\n            'eqheight           : ' + grid.eqheight,\n            'legacy             : ' + grid.legacy + '\\\\A ',\n            'auto_width         : ' + grid.auto_width,\n            'calc               : ' + grid.calc,\n            'columns_ratio      : ' + grid.columns_ratio,\n            'columns_unit       : ' + grid.columns_unit,\n            'grid_col_ratio     : ' + grid.grid_col_ratio,\n            'grid_col_width     : ' + grid.grid_col_width,\n            'grid_width         : ' + grid.grid_width,\n            'order_offsets      : ' + grid.order_offsets,\n            'total_columns      : ' + grid.total_columns,\n            'total_ratio_columns: ' + grid.total_ratio_columns,\n            'total_unit_columns : ' + grid.total_unit_columns\n        ].join('\\\\A ');\n\n        siblingContainer.append(\n            postcss.rule(\n                { selector: appendSelectors(nthSelector, ':before') }\n            ).append(\n                { text: 'Nth-Grid Debug' },\n                { prop: 'content', value: '\"' + debugContent + '\"' },\n                { prop: 'display', value: 'block !important' },\n                { prop: 'flex-basis', value: '100% !important' },\n                { prop: 'overflow', value: 'hidden !important' },\n                { prop: 'padding', value: '1em !important' },\n                { prop: 'background', value: grid.debug_background_color + ' !important' },\n                { prop: 'color', value: grid.debug_text_color + ' !important' },\n                { prop: 'font-family', value: '\"Lucida Console\", \"Consolas\", Monaco, monospace !important' },\n                { prop: 'font-size', value: '12px !important' },\n                { prop: 'line-height', value: '1.4 !important' },\n                { prop: 'text-align', value: 'left !important' },\n                { prop: 'white-space', value: 'pre !important' }\n            )\n        );\n    }\n}\n","// Dependencies\n// =============================================================================\nimport postcss         from 'postcss';\nimport appendSelectors from '../util/append-selectors';\nimport unitMath        from '../util/unit-math';\n\n\n// Exports\n// =============================================================================\n// Generates overlay css for grid columns\nexport default function gridOverlay(grid, nthSelector, selectorContainer, siblingContainer) {\n    const overlayFontSize = '14px';\n\n    if (grid.overlay) {\n        selectorContainer.append(\n            { text: 'Nth-Grid Overlay' },\n            { prop: 'position', value: 'relative' },\n            { prop: 'visibility', value: 'visible !important' },\n            { prop: 'background', value: grid.overlay_margin_color + ' !important' }\n        );\n\n        siblingContainer.append(\n            postcss.rule(\n                { selector: nthSelector + ' > *' }\n            ).append(\n                { text: 'Nth-Grid Overlay' },\n                { prop: 'position', value: 'relative !important' },\n                { prop: 'min-height', value: unitMath([overlayFontSize, 3], ' * ') + ' !important' },\n                { prop: 'background', value: grid.overlay_column_color +  ' !important' },\n                { prop: 'color', value: 'transparent !important' }\n            )\n        );\n\n        siblingContainer.append(\n            postcss.rule(\n                { selector: appendSelectors(nthSelector, ' > *:before') }\n            ).append(\n                { text: 'Nth-Grid Overlay' },\n                { prop: 'position', value: 'absolute !important' },\n                { prop: 'top', value: '0 !important' },\n                { prop: 'bottom', value: '0 !important' },\n                { prop: 'left', value: '0 !important' },\n                { prop: 'right', value: '0 !important' },\n                { prop: 'height', value: overlayFontSize + ' !important' },\n                { prop: 'width', value: '100% !important' },\n                { prop: 'margin', value: 'auto !important' },\n                { prop: 'color', value: grid.overlay_text_color +  ' !important' },\n                { prop: 'font-size', value: overlayFontSize +  ' !important' },\n                { prop: 'text-align', value: 'center !important' },\n                { prop: 'line-height', value: '1 !important' }\n            )\n        );\n\n        siblingContainer.append(\n            postcss.rule(\n                { selector: nthSelector + ' > * > *' }\n            ).append(\n                { text: 'Nth-Grid Overlay' },\n                { prop: 'visibility', value: 'hidden !important' }\n            )\n        );\n    }\n}\n","// Dependencies\n// =============================================================================\nimport getNumber from './get-number';\n\n\n// Exports\n// =============================================================================\n// Converts numbers, arrays and booleans stored as strings to appropriate type\nexport default function(val) {\n    // Number\n    if (Number(val)) {\n        return Number(val);\n    }\n    // Zero with units\n    else if (getNumber(val) === 0) {\n        return 0;\n    }\n    // Boolean\n    else if (val.toLowerCase() === 'true' || val.toLowerCase() === 'false') {\n        return val.toLowerCase() === 'true';\n    }\n    // No change\n    else {\n        return val;\n    }\n}\n","// Dependencies\n// =============================================================================\nimport getNumber     from './util/get-number';\nimport getUnit       from './util/get-unit';\nimport Grid          from './lib/grid';\nimport gridColumns   from './lib/grid-columns';\nimport gridContainer from './lib/grid-container';\nimport gridDebug     from './lib/grid-debug';\nimport gridOverlay   from './lib/grid-overlay';\nimport normalize     from './util/normalize';\nimport postcss       from 'postcss';\n\n\n// Exports\n// =============================================================================\n// Entry point for PostCSS plugin\nexport default postcss.plugin('postcss-nth-grid', options => {\n    options = options || {};\n\n    const NTH_GLOBAL_PREFIX = '--nth-grid-';\n    const NTH_SELECTOR      = 'nth-grid';\n\n    return function(css) {\n        // Loop through rules and find all global settings in root element(s)\n        css.walkRules(function(rule) {\n            // Global options\n            if (rule.selector === ':root') {\n                rule.walkDecls(function(decl) {\n                    if (decl.prop.indexOf(NTH_GLOBAL_PREFIX) === 0) {\n                        const key = decl.prop.replace(NTH_GLOBAL_PREFIX, '').replace(/-/g, '_');\n                        const arr = decl.value.split(' ').map(function(val){\n                            return normalize(val);\n                        });\n\n                        // Add to options object\n                        options[key] = arr.length > 1 ? arr : arr[0];\n                    }\n                });\n\n                // Remove options\n                if (options.remove_globals) {\n                    // Remove declarations\n                    rule.walkDecls(function(decl) {\n                        if (decl.prop.indexOf(NTH_GLOBAL_PREFIX) === 0) {\n                            decl.remove();\n                        }\n                    });\n\n                    // Remove root element if empty\n                    if (rule.nodes.length === 0) {\n                        rule.remove();\n                    }\n                }\n            }\n\n            // Nth-Grid blocks\n            if (rule.selector === NTH_SELECTOR) {\n                const nthRule     = rule;\n                const nthSelector = nthRule.parent.selector;\n                const settings    = {};\n\n                // Nth-Grid Variables\n                // -------------------------------------------------------------\n                // Add semicolon to last declaration\n                nthRule.parent.raws.semicolon = true;\n\n                // Loop through nth-grid declaration and update settings\n                nthRule.walkDecls(function(decl) {\n                    const key = decl.prop.replace(/-/g, '_');\n                    const arr = decl.value.split(' ').map(function(val){\n                        return normalize(val);\n                    });\n\n                    // Add to settings object\n                    settings[key] = arr.length > 1 ? arr : arr[0];\n                });\n\n                // Get grid settings and store as object\n                const grid = new Grid(settings, options);\n\n                // Create placeholder containers for all generated css.\n                // By adding new nodes to these containers first and then moving\n                // the child nodes after css generation is complete we can use\n                // 'append' instead of 'insert' and ensure new css content is\n                // added in the correct order and respect the position of the\n                // declarations that proceed the nth-grid block.\n                const selectorContainer = nthRule.cloneAfter({ selector: 'nth-grid-output' })\n                    .removeAll();\n\n                // Create placeholder rule for all generated css\n                const siblingContainer = nthRule.clone({ selector: 'nth-grid-sibling-output' })\n                    .removeAll();\n\n                nthRule.parent.after(siblingContainer);\n\n                // Nth-Grid CSS\n                // -------------------------------------------------------------\n                // Generate content within placeholder containers\n                gridContainer(grid, nthSelector, selectorContainer, siblingContainer);\n                gridColumns(grid, nthSelector, selectorContainer, siblingContainer);\n                gridOverlay(grid, nthSelector, selectorContainer, siblingContainer);\n                gridDebug(grid, nthSelector, selectorContainer, siblingContainer);\n\n                // Convert rem values to px for legacy browsers\n                if (grid.legacy) {\n                    // Loop through containers\n                    [selectorContainer, siblingContainer].forEach(function(container) {\n                        container.walk(function(node) {\n                            if (node.value && getUnit(node.value) === 'rem') {\n                                const pxVal = getNumber(node.value) * grid.rem_base + 'px';\n\n                                node.parent.insertBefore(node, node.clone({ prop: node.prop, value: pxVal }));\n                            }\n                        });\n                    });\n                }\n\n                // Loop through containers\n                [selectorContainer, siblingContainer].forEach(function(container) {\n                    container.each(function(node) {\n                        // Set each node's source to the nthRule source\n                        node.source = nthRule.source;\n                        // Move the node\n                        container.before(node);\n                    });\n                    // Remove the container\n                    container.remove();\n                });\n\n                // Remove nth-grid block\n                nthRule.remove();\n            }\n        });\n    };\n});\n"],"names":["value","falseValue","vars","reNotLength","test","match","toString","reNumber","number","length","Number","reUnit","unit","stringMath","expression","Function","arr","operator","finalUnit","nums","i","num","getNumber","getUnit","log","push","trim","replace","result","join","concat","settings","column","order","offset","sibling_val","calc","offset_vals","sibling_gaps","sibling_ratio_cols","sibling_unit_cols","columns_normalized","gap_h","grid_col_width","column_width","unitMath","matchUnit","Grid","options","this","defaults","settings_private","opt","priv","key","columns","Array","gap","gap_v","margin_h","margin","margin_v","dir_left","direction","dir_right","val","columns_ratio","columns_unit","total_ratio_columns","total_unit_columns","total_columns","grid_gaps","grid_margins","grid_col_ratio","isMatched","isUnitMatch","width","isMatchedGrid","isPercentGrid","grid_unit_cols","auto_width","grid_width","col_val","j","order_val","column_offset","getOrderOffset","order_offset","order_offsets","selectorList","appendText","split","map","selector","decimals","rounding","Math","round","overlayContent","grid","container","content","overlay","selectorBefore","sel","append","postcss","rule","prop","gridColumns","nthSelector","selectorContainer","siblingContainer","newRule","legacy","warnings","warn","appendSelectors","forEach","columnVal","nthCol","indexOf","columnWidth","orderVal","gridContainer","eqheight","valign","center","gridDebug","debug","debugContent","text","debug_background_color","debug_text_color","gridOverlay","overlayFontSize","overlay_margin_color","overlay_column_color","overlay_text_color","toLowerCase","plugin","NTH_GLOBAL_PREFIX","NTH_SELECTOR","css","walkRules","walkDecls","decl","normalize","remove_globals","remove","nodes","nthRule","parent","raws","semicolon","cloneAfter","removeAll","clone","after","walk","node","pxVal","rem_base","insertBefore","each","source","before"],"mappings":"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"}