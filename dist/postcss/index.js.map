{"version":3,"file":"index.js","sources":["../../src/postcss/lib/vars.js","../../src/postcss/util/get-number.js","../../src/postcss/util/get-unit.js","../../src/postcss/util/unit-math.js","../../src/postcss/util/get-order-offset.js","../../src/postcss/util/is-unit-match.js","../../src/postcss/lib/grid.js","../../src/postcss/util/append-selectors.js","../../src/postcss/util/round.js","../../src/postcss/lib/grid-columns.js","../../src/postcss/lib/grid-container.js","../../src/postcss/lib/grid-debug.js","../../src/postcss/lib/grid-overlay.js","../../src/postcss/util/normalize.js","../../src/postcss/index.js"],"sourcesContent":["// Exports\n// =============================================================================\nexport default {\n    // reNotLength: /[^\\w\\%\\.\\-]/,\n    reNotLength: /[^\\w%.-]/,\n    reNumber   : /^[-+]?[0-9]*\\.?[0-9]+/,\n    reUnit     : /[a-z|%]+$/,\n    rounding   : 5\n};\n","// Dependencies\n// =============================================================================\nimport vars from '../lib/vars';\n\n\n// Exports\n// =============================================================================\n// Get number in string (e.g. '12rem' => 12)\nexport default function(value, falseValue) {\n    if (vars.reNotLength.test(value)) {\n        return false;\n    }\n    else {\n        const match  = value.toString().match(vars.reNumber) || false;\n        const number = match.length ? Number(match) * 1 : falseValue || false;\n\n        return number;\n    }\n}\n","// Dependencies\n// =============================================================================\nimport vars from '../lib/vars';\n\n\n// Exports\n// =============================================================================\n// Get unit in string (e.g. '12rem' => 'rem')\nexport default function(value, falseValue) {\n    if (vars.reNotLength.test(value)) {\n        return false;\n    }\n    else {\n        const match = value.toString().match(vars.reUnit) || false;\n        const unit  = match.length ? match.toString() : falseValue || false;\n\n        return unit;\n    }\n}\n","// Dependencies\n// =============================================================================\nimport getNumber from './get-number';\nimport getUnit   from './get-unit';\n\n\n// Functions\n// =============================================================================\n// Calculates string as mathematical expression. Used instead of eval to avoid\n// console warning on compilation.\nfunction stringMath(expression) {\n    return new Function('return ' + expression)();\n}\n\n\n// Exports\n// =============================================================================\n// Allows for basic math on string lengths (numbers with with units)\n// Ex: unitMath(['1rem', '1rem'], ' + ') /* '2rem' */\nexport default function(arr, operator) {\n    let   finalUnit = '';\n    const nums      = [];\n\n    // Loop through array values\n    for (let i = 0; i < arr.length; i++) {\n        const num  = getNumber(arr[i]);\n        const unit = getUnit(arr[i]);\n\n        // Ignore zero value units\n        if (num !== 0) {\n            // Verify math compatibility and store unit\n            if (unit.length) {\n                if (finalUnit.length && unit !== finalUnit) {\n                    // eslint-disable-next-line\n                    console.log(`NTH-GRID: Incompatible unitMath() arguments: ${arr}`);\n\n                    return 0;\n                }\n                else {\n                    finalUnit = unit;\n                }\n            }\n        }\n\n        // Add item to numbers array\n        nums.push(num);\n    }\n\n    // Cleanse operator\n    operator = operator.trim().replace(/[^+\\-*/().\\d\\s]/g, '');\n\n    // Calculate result\n    const result = nums.length ? stringMath(nums.join(operator)).toString().concat(finalUnit) : 0; // jshint ignore:line\n\n    // Convert zero to number\n    return Number(result) === 0 ? 0 : result;\n}\n","// Dependencies\n// =============================================================================\nimport unitMath from '../util/unit-math';\n\n// Exports\n// =============================================================================\n// Calculates columns offset for source ordering.\n// Note that IE9 truncates css values after 128 characters. Grid columms\n// that require an offset using a calc() string longer than this will\n// not render properly.\nexport default function(settings, column, order) {\n    let offset = 0, i;\n\n    // Only columns following the first need offset calculated\n    if (column > 1) {\n        let sibling_val;\n\n        // Calc() required\n        if (settings.calc) {\n            // Store sibling ratio column and gap counts.\n            // Used to generate the shortest possible calc() strings\n            const offset_vals       = [];\n            let sibling_gaps        = 0;\n            let sibling_ratio_cols  = 0;\n            const sibling_unit_cols = [];\n\n            // Loop through all preceding columns\n            for (i = 0; i < (column - 1); i++) {\n                // Get sibling values from columns_normalized or order\n                if (order) {\n                    sibling_val = settings.columns_normalized[order[i] - 1];\n                }\n                else {\n                    sibling_val = settings.columns_normalized[i];\n                }\n\n                // Gap\n                if (settings.gap_h !== 0) {\n                    sibling_gaps += 1;\n                }\n\n                // Ratio-based value\n                if (Number(sibling_val)) {\n                    sibling_ratio_cols += Number(sibling_val);\n                }\n                // Unit-based value\n                else {\n                    sibling_unit_cols.push(sibling_val);\n                }\n            }\n\n            // Ratio offset\n            if (sibling_ratio_cols > 0) {\n                if (sibling_ratio_cols === 1) {\n                    offset_vals.push(settings.grid_col_width);\n                }\n                else {\n                    offset_vals.push('((' + settings.grid_col_width + ') * ' + sibling_ratio_cols + ')');\n                }\n            }\n\n            // Unit offset\n            if (sibling_unit_cols.length > 0) {\n                offset_vals.push(sibling_unit_cols.join(' + '));\n            }\n\n            // Gap offset\n            if (sibling_gaps > 0) {\n                if (sibling_gaps === 1) {\n                    offset_vals.push(settings.gap_h);\n                }\n                else {\n                    offset_vals.push('(' + settings.gap_h + ' * ' + sibling_gaps + ')');\n                }\n            }\n\n            // Final offset\n            offset = offset_vals.join(' + ');\n        }\n        // Calc() not required\n        else {\n            let column_width;\n\n            // Loop through all preceding columns\n            for (i = 0; i < (column - 1); i++) {\n                // Get sibling values from columns_normalized or order\n                if (order) {\n                    sibling_val = settings.columns_normalized[order[i] - 1];\n                }\n                else {\n                    sibling_val = settings.columns_normalized[i];\n                }\n\n                // Add ratio-based value\n                if (Number(sibling_val)) {\n                    const grid_col_width = settings.grid_col_width;\n\n                    column_width = unitMath([grid_col_width, sibling_val], ' * ');\n                    offset       = unitMath([offset, column_width, settings.gap_h], ' + ');\n                }\n                // Add unit-based value\n                else {\n                    column_width = unitMath([sibling_val, settings.gap_h], ' + ');\n                    offset       = unitMath([offset, column_width], ' + ');\n                }\n            }\n        }\n    }\n\n    return offset;\n}\n","// Dependencies\n// =============================================================================\nimport getNumber from './get-number';\nimport getUnit   from './get-unit';\n\n\n// Exports\n// =============================================================================\n// Compare units of array items, ignoring zero values w/o units\nexport default function(arr, matchUnit) {\n    // Return false if value os not a valid length (e.g. calc)\n    if (!getNumber(arr[0]) && !getUnit(arr[0])) {\n        return false;\n    }\n    // Get matching unit from first item if unspecified\n    else if (!matchUnit) {\n        matchUnit = getUnit(arr[0]);\n    }\n\n    // Loop through array values\n    for (let i = 0; i < arr.length; i++) {\n        const num  = getNumber(arr[i]);\n        const unit = num !== 0 ? getUnit(arr[i]) : false;\n\n        // Return false if value is not a valid length (e.g. calc)\n        if (num === false && unit === false) {\n            return false;\n        }\n        // Return false if units do not match\n        if (num !== 0 && unit !== matchUnit) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","// Dependencies\n// =============================================================================\nimport getOrderOffset from '../util/get-order-offset';\nimport getUnit        from '../util/get-unit';\nimport isUnitMatch    from '../util/is-unit-match';\nimport unitMath       from '../util/unit-math';\n\n\n// Exports\n// =============================================================================\n// Generates new object containing grid properties\nexport default function Grid(settings, options) {\n    options = options || {};\n\n    // Protect against instantiating without `new` keyword\n    if (!(this instanceof Grid)) {\n        return new Grid(settings, options);\n    }\n\n    // Nth-Grid Defaults\n    const defaults = {\n        // Layout\n        columns               : [1],\n        gap                   : 0,\n        margin                : 0,\n        direction             : 'ltr',\n        flex                  : true,\n        flex_legacy           : true,\n        float                 : false,\n        float_legacy          : false,\n\n        // Debug\n        debug                 : false,\n        debug_background_color: '#000',\n        debug_text_color      : '#ccc',\n\n        // Overlay\n        overlay               : false,\n        overlay_column_color  : '#7c48c3',\n        overlay_margin_color  : '#dabfff',\n        overlay_text_color    : '#fff',\n\n        // Compilation\n        rem_base              : 16,\n        remove_warnings       : true,\n        warnings              : true\n    };\n\n    // Private defaults\n    const settings_private = {\n        width                 : '100%',\n        order                 : false,\n        auto_width            : null,\n        calc                  : null,\n        columns_ratio         : [],\n        columns_unit          : [],\n        grid_col_ratio        : 0,\n        grid_col_width        : 0,\n        grid_width            : null,\n        gap_h                 : 0,\n        columns_normalized    : [],\n        margin_h              : 0,\n        order_offsets         : [],\n        total_columns         : 0,\n        total_ratio_columns   : 0,\n        total_unit_columns    : 0\n    };\n\n    // Update defaults with global options\n    for (const opt in options) {\n        if (opt in defaults) {\n            defaults[opt] = options[opt];\n        }\n    }\n\n    // Add private properties to settings\n    // Adding these after the global options prevents setting private\n    // settings via CSS or JS globals\n    for (const priv in settings_private) {\n        if (!(priv in settings)) {\n            settings[priv] = settings_private[priv];\n        }\n    }\n\n    // Add missing properties from defaults to settings\n    for (const key in defaults) {\n        if (!(key in settings)) {\n            settings[key] = defaults[key];\n        }\n    }\n\n    // Convert single-value columns layout and order settings to arrays\n    settings.columns = settings.columns instanceof Array ? settings.columns : [settings.columns];\n    settings.order = settings.order instanceof Array ? settings.order : settings.order !== false ? [settings.order] : settings.order;\n\n    // Extract horizontal gap and margin from arrays\n    settings.gap_h = settings.gap instanceof Array ? (settings.gap[1] || settings.gap[0]) : settings.gap;\n    settings.gap_v = settings.gap instanceof Array ? settings.gap[0] : settings.gap;\n    settings.margin_h = settings.margin instanceof Array ? (settings.margin[1] || settings.margin[0]) : settings.margin;\n    settings.margin_v = settings.margin instanceof Array ? settings.margin[0] : settings.margin;\n\n    // Direction\n    settings.dir_left  = settings.direction === 'rtl' ? 'right' : 'left';\n    settings.dir_right = settings.direction === 'rtl' ? 'left' : 'right';\n\n\n    // Populate settings\n    // ---------------------------------------------------------------------\n    let i;\n\n    // Ratio- and unit-based column lists\n    for (i = 0; i < settings.columns.length; i++) {\n        const val = settings.columns[i];\n\n        if (Number(val)) {\n            settings.columns_ratio.push(Number(val));\n        }\n        else {\n            settings.columns_unit.push(val);\n        }\n    }\n\n    // Total column count\n    settings.total_ratio_columns = settings.columns_ratio.length === 1 ? settings.columns_ratio[0] : settings.columns_ratio.length;\n    settings.total_unit_columns  = settings.columns_unit.length;\n    settings.total_columns       = settings.total_ratio_columns + settings.total_unit_columns;\n\n    // Calculate combined grid gap and margin\n    let grid_gaps = unitMath([settings.gap_h, (settings.total_columns - 1)], ' * '),\n        grid_margins = unitMath([settings.margin_h, 2], ' * ');\n\n    // Grid ratio\n    if (settings.columns_ratio.length === 1) {\n        settings.grid_col_ratio = settings.columns_ratio[0];\n    }\n    else {\n        settings.grid_col_ratio = 0;\n\n        // Sum ratio based column values\n        for (i = 0; i < settings.columns_ratio.length; i++) {\n            settings.grid_col_ratio += settings.columns_ratio[i];\n        }\n    }\n\n    // Are all units matched?\n    const isMatched = isUnitMatch([]\n        .concat(settings.width)\n        .concat(settings.columns_unit)\n        .concat(settings.gap)\n        .concat(settings.margin));\n\n    // All all grid units matched?\n    const isMatchedGrid = settings.columns_ratio.length === 0 && isUnitMatch([]\n        .concat(settings.columns_unit)\n        .concat(settings.gap)\n        .concat(settings.margin));\n\n    // Are all grid values percent?\n    const isPercentGrid = isUnitMatch([]\n        .concat(settings.columns_unit)\n        .concat(settings.gap)\n        .concat(settings.margin), '%');\n\n    // Calc() required?\n    settings.calc = !(isMatched || isMatchedGrid || isPercentGrid);\n\n    // Grid container auto width\n    if (settings.columns_ratio.length === 0) {\n        // Calc() required\n        if (settings.calc) {\n            const grid_unit_cols = isUnitMatch(settings.columns_unit) ? unitMath(settings.columns_unit, ' + ') : settings.columns_unit.join(' + ');\n\n            // Matched gap & margin units\n            if (settings.gap_h !== 0 && settings.margin_h !== 0 && isUnitMatch([grid_gaps, grid_margins])) {\n                settings.auto_width = grid_unit_cols + ' + ' + unitMath([grid_gaps, grid_margins], ' + ');\n            }\n            // Matched column and gap units\n            else if (settings.gap_h !== 0 && isUnitMatch([grid_unit_cols, grid_gaps])) {\n                settings.auto_width = unitMath([grid_unit_cols, grid_gaps], ' + ') + ' + ' + (settings.margin_h !== 0 ? grid_margins : '');\n            }\n            // Matched column and margin units\n            else if (settings.margin_h !== 0 && isUnitMatch([grid_unit_cols, grid_margins])) {\n                settings.auto_width = unitMath([grid_unit_cols, grid_margins], ' + ') + ' + ' + (settings.gap_h !== 0 ? grid_gaps : '');\n            }\n            // No match\n            else {\n                settings.auto_width = grid_unit_cols;\n\n                // Add gaps\n                if (settings.gap_h !== 0) {\n                    settings.auto_width += ' + ' + grid_gaps;\n                }\n\n                // Add margins\n                if (settings.margin_h !== 0) {\n                    settings.auto_width += ' + ' + grid_margins;\n                }\n            }\n        }\n        // Calc() not required\n        else {\n            // Unit-based columns\n            settings.auto_width = unitMath(settings.columns_unit, ' + ');\n\n            // Add gaps and margins\n            settings.auto_width = unitMath([settings.auto_width, grid_gaps, grid_margins], ' + ');\n        }\n    }\n\n    // Ratio grid width - Calc() required\n    // Grid width of 99.99% used for sub-pixel rendering bug (e.g. IE9, Chrome < 38)\n    if (settings.calc) {\n        // Single unit-based column\n        if (settings.columns_unit.length === 1) {\n            settings.grid_width = '99.99% - ' + settings.columns_unit[0];\n        }\n        // Multiple unit-based columns\n        else if (settings.columns_unit.length > 1) {\n            // Matched units\n            if (isUnitMatch(settings.columns_unit)) {\n                settings.grid_width = '99.99% - ' + unitMath(settings.columns_unit, ' + ');\n            }\n            // Mixed units\n            else {\n                settings.grid_width = '99.99% - (' + settings.columns_unit.join(' + ') + ')';\n            }\n        }\n        // No unit-based columns\n        else {\n            settings.grid_width = '99.99%';\n        }\n    }\n    // Ratio grid width - Calc() not required\n    else {\n        if (isMatched && getUnit(settings.width) !== '%') {\n            settings.grid_width = settings.width;\n\n            // Subtract unit-based column values from width\n            if (settings.columns_unit.length) {\n                settings.grid_width = unitMath([settings.grid_width, unitMath(settings.columns_unit, ' + ')], ' - ');\n            }\n        }\n        else if (isPercentGrid) {\n            settings.grid_width = '100%';\n\n            // Subtract unit-based column values from width\n            if (settings.columns_unit.length) {\n                settings.grid_width = unitMath([settings.grid_width, unitMath(settings.columns_unit, ' + ')], ' - ');\n            }\n        }\n        else {\n            settings.grid_width = '100%';\n        }\n    }\n\n    // Ratio-based column width\n    if (settings.total_ratio_columns > 0) {\n        // Calc() required\n        if (settings.calc) {\n            // Matched gap and margin units\n            if (settings.gap_h !== 0 && settings.margin_h !== 0 && isUnitMatch([settings.gap_h, settings.margin_h])) {\n                settings.grid_col_width = settings.grid_width + ' - ' + unitMath([grid_gaps, grid_margins], ' + ');\n            }\n            // Matched column and gap units\n            else if (settings.gap_h !== 0 && isUnitMatch([settings.grid_width, grid_gaps])) {\n                settings.grid_col_width = unitMath([settings.grid_width, grid_gaps], ' - ');\n\n                if (grid_margins !== 0) {\n                    settings.grid_col_width += ' - ' + grid_margins;\n                }\n            }\n            // Matched column and margin units\n            else if (settings.margin_h !== 0 && isUnitMatch([settings.grid_width, grid_margins])) {\n                settings.grid_col_width = unitMath([settings.grid_width, grid_margins], ' - ');\n\n                if (grid_gaps !== 0) {\n                    settings.grid_col_width += ' - ' + grid_gaps;\n                }\n            }\n            // No match\n            else {\n                grid_gaps = settings.gap_h !== 0 ? ' - ' + grid_gaps : '';\n                grid_margins = settings.margin_h !== 0 ? ' - ' + grid_margins : '';\n\n                settings.grid_col_width = settings.grid_width + grid_gaps + grid_margins;\n            }\n\n            // Divide by grid ratio\n            settings.grid_col_width = '(' + settings.grid_col_width + ') / ' + settings.grid_col_ratio;\n        }\n        // Calc() not required\n        else {\n            // Calculate grid width without gaps and margins\n            settings.grid_col_width = unitMath([settings.grid_width, grid_gaps, grid_margins], ' - ');\n\n            // Divide by grid ratio\n            settings.grid_col_width = unitMath([settings.grid_col_width, settings.grid_col_ratio], ' / ');\n        }\n    }\n\n    // Calculate ordered column offsets\n    if (settings.order && settings.order.length <= settings.total_columns) {\n        // Expand single ratio-value column to multi-column\n        // Ex: nth-grid(6) /* columns_normalized: 1 1 1 1 1 1 */\n        if (settings.columns_ratio.length === 1) {\n            for (i = 0; i < settings.columns.length; i++) {\n                const col_val = settings.columns[i];\n                const num     = Number(col_val) || false;\n\n                // Single ratio-based value\n                if (num) {\n                    for (let j = 0; j < num; j++) {\n                        settings.columns_normalized.push(1);\n                    }\n                }\n                // Other values\n                else {\n                    settings.columns_normalized.push(col_val);\n                }\n            }\n        }\n        else {\n            settings.columns_normalized = settings.columns;\n        }\n\n        // Loop through order\n        for (i = 0; i < settings.order.length; i++) {\n            let offset    = 0;\n            const order_val = settings.order[i];\n\n            // Get offset of the order column value in the original column layout\n            // Ex: Column 3 offset in original @columns\n            const column_offset = getOrderOffset(settings, order_val);\n\n            // Get offset of the order column number in the ordered column layout\n            // Ex: Column 3 offset in $order 3 2 1 (1st position)\n            const order_offset = getOrderOffset(settings, i + 1, settings.order);\n\n            // Set final offset values in array\n            if (order_offset !== column_offset) {\n                // Calc() required\n                if (settings.calc) {\n                    if (order_offset === 0) {\n                        offset = '0px - (' + column_offset + ')';\n                    }\n                    else if (column_offset === 0) {\n                        offset = order_offset;\n                    }\n                    else {\n                        offset = '(' + order_offset + ') - (' + column_offset + ')';\n                    }\n                }\n                // Calc() not required\n                else {\n                    offset = unitMath([order_offset, column_offset], ' - ');\n                }\n            }\n\n            // Push value to order offset array\n            settings.order_offsets.push(offset);\n        }\n    }\n\n    // Return settings object\n    return settings;\n}\n","// Exports\n// =============================================================================\n// Appends content to comma-separated selector strings\nexport default function(selectorList, appendText) {\n    return selectorList.split(',').map(function(selector) {\n        return selector.trim() + appendText;\n    });\n}\n","// Dependencies\n// =============================================================================\nimport getNumber from './get-number';\nimport getUnit   from './get-unit';\nimport vars      from '../lib/vars';\n\n\n// Exports\n// =============================================================================\n// Round value to specified decimal places\nexport default function(val, decimals) {\n    decimals = decimals || vars.rounding;\n\n    let   num  = getNumber(val);\n    const unit = getUnit(val);\n\n    // Only use toFixed() if length if greater than decimals\n    if (num.toString().match(/\\d/g).length > decimals) {\n        num = Number(Math.round(num + 'e' + decimals) + 'e-' + decimals);\n    }\n\n    return unit ? num.toString() + unit : num;\n}\n","// Dependencies\n// =============================================================================\nimport postcss         from 'postcss';\nimport appendSelectors from '../util/append-selectors';\nimport round           from '../util/round';\nimport unitMath        from '../util/unit-math';\n\n\n// Functions\n// =============================================================================\n// Generates overly content rule\nfunction overlayContent(grid, selector, container, content) {\n    if (grid.overlay) {\n        const selectorBefore = selector.map(function(sel) {\n            return sel.trim() + ':before';\n        });\n\n        container.append(\n            postcss.rule(\n                { selector: selectorBefore }\n            ).append(\n                { prop: 'content', value: '\"' + content + '\" !important'}\n            )\n        );\n    }\n}\n\n\n// Exports\n// =============================================================================\n// Generates css for grid columns\nexport default function gridColumns(grid, nthSelector, selectorContainer, siblingContainer) {\n    let newRule;\n\n    // Legacy warning\n    if (grid.float_legacy && grid.calc && grid.warnings) {\n        // eslint-disable-next-line\n        console.warn(`NTH-GRID: \"${nthSelector}\" requires calc() support. This grid will not render properly in legacy browsers.`);\n    }\n\n    // All columns\n    // -------------------------------------------------------------------------\n    newRule = postcss.rule(\n        { selector: appendSelectors(nthSelector, ' > *:nth-child(1n)') }\n    ).append(\n        { prop: 'box-sizing', value: 'border-box' },\n        { prop: 'position', value: 'static' },\n        { prop: grid.dir_left, value: 'auto' }\n    );\n\n    if (grid.float) {\n        newRule.append(\n            { prop: 'float', value: grid.dir_left },\n            { prop: 'clear', value: 'none' },\n            { prop: 'margin-' + grid.dir_right, value: '0' }\n        );\n\n        if (grid.float_legacy) {\n            // IE7 float fix\n            newRule.append(\n                { prop: '*display', value: 'inline' },\n                { prop: '*float', value: 'none' },\n                { prop: '*vertical-align', value: 'top' },\n                { prop: '*zoom', value: '1' }\n            );\n        }\n    }\n\n    newRule.append(\n        // Gap - Vertical\n        { prop: 'margin-top', value: grid.gap_v },\n        // Gap - Horizontal\n        { prop: 'margin-' + grid.dir_left, value: grid.gap_h }\n    );\n\n    siblingContainer.append(newRule);\n\n    // All columns in first row\n    // -------------------------------------------------------------------------\n    siblingContainer.append(\n        postcss.rule(\n            { selector: appendSelectors(nthSelector, ' > *:nth-child(-n + ' + grid.total_columns + ')') }\n        ).append(\n            { prop: 'margin-top', value: grid.margin_v }\n        )\n    );\n\n    if (grid.float && grid.float_legacy && grid.margin_h === 0) {\n        siblingContainer.append(\n            // Last column in each row\n            postcss.rule(\n                { selector: appendSelectors(nthSelector, ' > *:nth-child(' + grid.total_columns + 'n)') }\n            ).append(\n                // IE7 sub-pixel rounding fix\n                { prop: '*margin-' + grid.dir_right, value: '-2px' }\n            )\n        );\n    }\n\n    // First column each row\n    // -------------------------------------------------------------------------\n    newRule = postcss.rule(\n        { selector: appendSelectors(nthSelector, ' > *:nth-child(' + grid.total_columns + 'n + 1)') }\n    );\n\n    if (grid.float) {\n        newRule.append(\n            { prop: 'clear', value: grid.dir_left }\n        );\n    }\n\n    newRule.append({ prop: 'margin-' + grid.dir_left, value: grid.margin_h });\n\n    siblingContainer.append(newRule);\n\n    // All columns in last row\n    // -------------------------------------------------------------------------\n    newRule = postcss.rule(\n        { selector: appendSelectors(nthSelector, ' > *:nth-last-child(-n + ' + grid.total_columns + ')') }\n    );\n\n    // Margin - Vertical\n    if (grid.margin_v === 0) {\n        newRule.append(\n            { prop: 'margin-bottom', value: '0' }\n        );\n    }\n    // Calc used to target modern browsers because Selectivizr does\n    // not properly match this selector using NWMatcher (it does match\n    // properly with jQuery). Entire row must be targeted to ensure\n    // proper alignment when vertical alignment option is used.\n    else {\n        newRule.append(\n            { prop: 'margin-bottom', value: 'calc(' + grid.margin_v + ')' }\n        );\n    }\n\n    siblingContainer.append(newRule);\n\n    if (grid.float && grid.float_legacy) {\n        // Last child serving as \"last row\" for selectivir compatibility.\n        // Only one element in the last row is needed for vertical margin\n        // since vertical alignment (via flexbox) is not an issue.\n        siblingContainer.append(\n            postcss.rule(\n                { selector: appendSelectors(nthSelector, ' > *:last-child') }\n            ).append(\n                { prop: 'margin-bottom', value: grid.margin_v }\n            )\n        );\n    }\n\n    // Width: Unit-based column(s) only\n    // -------------------------------------------------------------------------\n    if (grid.columns_ratio.length === 0) {\n        grid.columns.forEach(function(columnVal, i) {\n            i++;\n\n            newRule = postcss.rule(\n                { selector: appendSelectors(nthSelector, ' > *:nth-child(' + grid.total_columns + 'n + ' + i + ')') }\n            ).append(\n                { prop: 'width', value: columnVal }\n            );\n\n            siblingContainer.append(newRule);\n\n            // Grid overlay\n            overlayContent(grid, newRule.selector, siblingContainer, columnVal);\n        });\n    }\n\n    // Width: Single ratio-based value\n    // -------------------------------------------------------------------------\n    else if (grid.columns_ratio.length === 1) {\n        // Ratio-based column\n        newRule = postcss.rule(\n            { selector: appendSelectors(nthSelector, ' > *:nth-child(1n)') }\n        );\n\n        // Calc() required\n        if (grid.calc) {\n            siblingContainer.append(\n                newRule.append(\n                    { prop: 'width', value: 'calc(' + grid.grid_col_width + ')'}\n                )\n            );\n\n            // Grid overlay\n            overlayContent(grid, newRule.selector, siblingContainer, '1/' + grid.grid_col_ratio + ' (calc)');\n        }\n        // Calc() not required\n        else {\n            siblingContainer.append(\n                newRule.append(\n                    { prop: 'width', value: round(grid.grid_col_width)}\n                )\n            );\n\n            // Grid overlay\n            overlayContent(grid, newRule.selector, siblingContainer, '1/' + grid.grid_col_ratio + ' (' + round(grid.grid_col_width, 2) + ')');\n        }\n\n        // Unit-based column(s)\n        if (grid.columns_unit.length > 0) {\n            grid.columns.forEach(function(columnVal, i) {\n                columnVal = Number(columnVal) || columnVal;\n\n                if (columnVal !== grid.total_ratio_columns) {\n                    const nthCol = i > grid.columns.indexOf(grid.total_ratio_columns) ? i + grid.total_ratio_columns : i + 1;\n\n                    newRule = postcss.rule(\n                        { selector: appendSelectors(nthSelector, ' > *:nth-child(' + grid.total_columns + 'n + ' + nthCol + ')') }\n                    ).append(\n                        { prop: 'width', value: columnVal }\n                    );\n\n                    siblingContainer.append(newRule);\n\n                    // Grid overlay\n                    overlayContent(grid, newRule.selector, siblingContainer, columnVal);\n                }\n            });\n        }\n    }\n\n    // Width: Mutiple ratio-based values\n    // -------------------------------------------------------------------------\n    else {\n        grid.columns.forEach(function(columnVal, i) {\n            i++;\n\n            const newRule = postcss.rule(\n                { selector: appendSelectors(nthSelector, ' > *:nth-child(' + grid.total_columns + 'n + ' + i + ')') }\n            );\n\n            // Ratio-based column\n            if (Number(columnVal)) {\n                // Calc() required\n                if (grid.calc) {\n                    siblingContainer.append(\n                        newRule.append(\n                            { prop: 'width', value: 'calc((' + grid.grid_col_width + ') * ' + columnVal + ')' }\n                        )\n                    );\n\n                    // Grid overlay\n                    overlayContent(grid, newRule.selector, siblingContainer, columnVal + '/' + grid.grid_col_ratio + ' (calc)');\n                }\n                // Calc() not required\n                else {\n                    const columnWidth = round(unitMath([grid.grid_col_width, columnVal], ' * '));\n\n                    siblingContainer.append(\n                        newRule.append(\n                            { prop: 'width', value: columnWidth }\n                        )\n                    );\n\n                    // Grid overlay\n                    overlayContent(grid, newRule.selector, siblingContainer, columnVal + '/' + grid.grid_col_ratio + ' (' + round(columnWidth, 2) + ')');\n                }\n            }\n            // Unit-based columns\n            else {\n                siblingContainer.append(\n                    newRule.append(\n                        { prop: 'width', value: columnVal }\n                    )\n                );\n\n                // Grid overlay\n                overlayContent(grid, newRule.selector, siblingContainer, columnVal);\n            }\n        });\n    }\n\n    // Order\n    // -------------------------------------------------------------------------\n    // Invalid order\n    if (grid.order && grid.order.length > grid.total_columns) {\n        if (grid.warnings) {\n            // eslint-disable-next-line\n            console.warn(`NTH-GRID: \"${nthSelector}\" order [${grid.order}] exceeds total column count of ${grid.total_columns} for columns [${grid.columns}]. Order not applied.`);\n        }\n    }\n    // Valid order\n    else if (grid.order_offsets.length) {\n        grid.order_offsets.forEach(function(offset, i) {\n            const orderVal = grid.order[i];\n\n            if (offset !== 0) {\n                siblingContainer.append(\n                    postcss.rule(\n                        { selector: appendSelectors(nthSelector, ' > *:nth-child(' + grid.total_columns + 'n + ' + orderVal + ')') }\n                    ).append(\n                        { prop: 'position', value: 'relative' },\n                        { prop: grid.dir_left, value: grid.calc ? 'calc(' + offset + ')' : round(offset) }\n                    )\n                );\n            }\n        });\n    }\n}\n","// Dependencies\n// =============================================================================\nimport postcss         from 'postcss';\nimport appendSelectors from '../util/append-selectors';\n\n\n// Exports\n// =============================================================================\n// Generates css for grid container\nexport default function gridContainer(grid, nthSelector, selectorContainer, siblingContainer) {\n    // Float\n    if (grid.float) {\n\n        selectorContainer.append({ prop: 'display', value: 'block' });\n\n        // Legacy\n        if (grid.float_legacy) {\n            // IE7 double padding fix\n            selectorContainer.append({ prop: '*display', value: 'inline-block' });\n        }\n\n        // Order\n        if (grid.order) {\n            // IE7 relative position fix\n            selectorContainer.append({ prop: '*position', value: 'relative' });\n        }\n    }\n\n    // Flex\n    if (grid.flex) {\n        if (grid.flex_legacy) {\n            selectorContainer.append(\n                { prop: 'display', value: '-webkit-box' },\n                { prop: 'display', value: '-ms-flexbox' }\n            );\n        }\n        selectorContainer.append({ prop: 'display', value: 'flex' });\n\n        if (grid.flex_legacy) {\n            selectorContainer.append({ prop: '-ms-flex-wrap', value: 'wrap' });\n        }\n        selectorContainer.append({ prop: 'flex-wrap', value: 'wrap' });\n\n        if (grid.flex_legacy) {\n            selectorContainer.append(\n                { prop: '-webkit-box-align', value: 'start' },\n                { prop: '-ms-flex-align', value: 'start' }\n            );\n        }\n        selectorContainer.append({ prop: 'align-items', value: 'flex-start' });\n\n        if (grid.direction === 'rtl') {\n            if (grid.flex_legacy) {\n                selectorContainer.append(\n                    { prop: '-webkit-box-orient', value: 'horizontal' },\n                    { prop: '-webkit-box-direction', value: 'reverse' },\n                    { prop: '-ms-flex-direction', value: 'row-reverse' }\n                );\n            }\n            selectorContainer.append({ prop: 'flex-direction', value: 'row-reverse' });\n        }\n    }\n\n    // Box sizing\n    if (grid.total_ratio_columns === 0) {\n        // Allow for borders when auto-width has been applied\n        selectorContainer.append({ prop: 'box-sizing', value: 'content-box' });\n    }\n    else {\n        // Allow for borders when auto-width has been applied\n        selectorContainer.append({ prop: 'box-sizing', value: 'border-box' });\n    }\n\n    // Width\n    if (grid.total_ratio_columns === 0 && grid.calc) {\n        selectorContainer.append({ prop: 'width', value: 'calc(' + grid.auto_width + ')' });\n    }\n    else if (grid.total_ratio_columns === 0) {\n        selectorContainer.append({ prop: 'width', value: grid.auto_width });\n    }\n    else if (grid.width !== '100%') {\n        selectorContainer.append({ prop: 'width', value: grid.width });\n    }\n    else {\n        selectorContainer.append({ prop: 'width', value: 'auto' });\n    }\n\n    // Clearfix\n    if (grid.float) {\n        siblingContainer.append(\n            postcss.rule(\n                { selector: appendSelectors(nthSelector, ':after') }\n            ).append(\n                { prop: 'content', value: '\\'\\'' },\n                { prop: 'display', value: 'table' },\n                { prop: 'clear', value: 'both' }\n            )\n        );\n    }\n}\n","// Dependencies\n// =============================================================================\nimport postcss         from 'postcss';\nimport appendSelectors from '../util/append-selectors';\n\n\n// Exports\n// =============================================================================\n// Generates debug css for grid container and columns\nexport default function gridDebug(grid, nthSelector, selectorContainer, siblingContainer) {\n    if (grid.debug) {\n        const debugContent = [\n            'columns            : ' + grid.columns,\n            'gap                : ' + grid.gap,\n            'margin             : ' + grid.margin,\n            'width              : ' + grid.width,\n            'order              : ' + grid.order,\n            'direction          : ' + grid.direction,\n            'flex               : ' + grid.flex,\n            'flex-legacy        : ' + grid.flex_legacy,\n            'float              : ' + grid.float,\n            'float-legacy       : ' + grid.float_legacy + '\\\\A ',\n            'auto_width         : ' + grid.auto_width,\n            'calc               : ' + grid.calc,\n            'columns_ratio      : ' + grid.columns_ratio,\n            'columns_unit       : ' + grid.columns_unit,\n            'grid_col_ratio     : ' + grid.grid_col_ratio,\n            'grid_col_width     : ' + grid.grid_col_width,\n            'grid_width         : ' + grid.grid_width,\n            'order_offsets      : ' + grid.order_offsets,\n            'total_columns      : ' + grid.total_columns,\n            'total_ratio_columns: ' + grid.total_ratio_columns,\n            'total_unit_columns : ' + grid.total_unit_columns\n        ].join('\\\\A ');\n\n        siblingContainer.append(\n            postcss.rule(\n                { selector: appendSelectors(nthSelector, ':before') }\n            ).append(\n                { text: 'Nth-Grid Debug' },\n                { prop: 'content', value: '\"' + debugContent + '\"' },\n                { prop: 'display', value: 'block !important' },\n                { prop: 'flex-basis', value: '100% !important' },\n                { prop: 'overflow', value: 'hidden !important' },\n                { prop: 'padding', value: '1em !important' },\n                { prop: 'background', value: grid.debug_background_color + ' !important' },\n                { prop: 'color', value: grid.debug_text_color + ' !important' },\n                { prop: 'font-family', value: '\"Lucida Console\", \"Consolas\", Monaco, monospace !important' },\n                { prop: 'font-size', value: '12px !important' },\n                { prop: 'line-height', value: '1.4 !important' },\n                { prop: 'text-align', value: 'left !important' },\n                { prop: 'white-space', value: 'pre !important' }\n            )\n        );\n    }\n}\n","// Dependencies\n// =============================================================================\nimport postcss         from 'postcss';\nimport appendSelectors from '../util/append-selectors';\nimport unitMath        from '../util/unit-math';\n\n\n// Exports\n// =============================================================================\n// Generates overlay css for grid columns\nexport default function gridOverlay(grid, nthSelector, selectorContainer, siblingContainer) {\n    const overlayFontSize = '14px';\n\n    if (grid.overlay) {\n        selectorContainer.append(\n            { text: 'Nth-Grid Overlay' },\n            { prop: 'position', value: 'relative' },\n            { prop: 'visibility', value: 'visible !important' },\n            { prop: 'background', value: grid.overlay_margin_color + ' !important' }\n        );\n\n        siblingContainer.append(\n            postcss.rule(\n                { selector: nthSelector + ' > *' }\n            ).append(\n                { text: 'Nth-Grid Overlay' },\n                { prop: 'position', value: 'relative !important' },\n                { prop: 'min-height', value: unitMath([overlayFontSize, 3], ' * ') + ' !important' },\n                { prop: 'background', value: grid.overlay_column_color +  ' !important' },\n                { prop: 'color', value: 'transparent !important' }\n            )\n        );\n\n        siblingContainer.append(\n            postcss.rule(\n                { selector: appendSelectors(nthSelector, ' > *:before') }\n            ).append(\n                { text: 'Nth-Grid Overlay' },\n                { prop: 'position', value: 'absolute !important' },\n                { prop: 'top', value: '0 !important' },\n                { prop: 'bottom', value: '0 !important' },\n                { prop: 'left', value: '0 !important' },\n                { prop: 'right', value: '0 !important' },\n                { prop: 'height', value: overlayFontSize + ' !important' },\n                { prop: 'width', value: '100% !important' },\n                { prop: 'margin', value: 'auto !important' },\n                { prop: 'color', value: grid.overlay_text_color +  ' !important' },\n                { prop: 'font-size', value: overlayFontSize +  ' !important' },\n                { prop: 'text-align', value: 'center !important' },\n                { prop: 'line-height', value: '1 !important' }\n            )\n        );\n\n        siblingContainer.append(\n            postcss.rule(\n                { selector: nthSelector + ' > * > *' }\n            ).append(\n                { text: 'Nth-Grid Overlay' },\n                { prop: 'visibility', value: 'hidden !important' }\n            )\n        );\n    }\n}\n","// Dependencies\n// =============================================================================\nimport getNumber from './get-number';\n\n\n// Exports\n// =============================================================================\n// Converts numbers, arrays and booleans stored as strings to appropriate type\nexport default function(val) {\n    // Number\n    if (Number(val)) {\n        return Number(val);\n    }\n    // Zero with units\n    else if (getNumber(val) === 0) {\n        return 0;\n    }\n    // Boolean\n    else if (val.toLowerCase() === 'true' || val.toLowerCase() === 'false') {\n        return val.toLowerCase() === 'true';\n    }\n    // No change\n    else {\n        return val;\n    }\n}\n","// Dependencies\n// =============================================================================\nimport getNumber     from './util/get-number';\nimport getUnit       from './util/get-unit';\nimport Grid          from './lib/grid';\nimport gridColumns   from './lib/grid-columns';\nimport gridContainer from './lib/grid-container';\nimport gridDebug     from './lib/grid-debug';\nimport gridOverlay   from './lib/grid-overlay';\nimport normalize     from './util/normalize';\nimport postcss       from 'postcss';\n\n\n// Exports\n// =============================================================================\n// Entry point for PostCSS plugin\nexport default postcss.plugin('postcss-nth-grid', options => {\n    options = options || {};\n\n    const NTH_GLOBAL_PREFIX = '--nth-grid-';\n    const NTH_SELECTOR      = 'nth-grid';\n\n    return function(css) {\n        // Loop through rules and find all global settings in root element(s)\n        css.walkRules(function(rule) {\n            // Global options\n            if (rule.selector === ':root') {\n                rule.walkDecls(function(decl) {\n                    if (decl.prop.indexOf(NTH_GLOBAL_PREFIX) === 0) {\n                        const key = decl.prop.replace(NTH_GLOBAL_PREFIX, '').replace(/-/g, '_');\n                        const arr = decl.value.split(' ').map(function(val){\n                            return normalize(val);\n                        });\n\n                        // Add to options object\n                        options[key] = arr.length > 1 ? arr : arr[0];\n                    }\n                });\n\n                // Remove options\n                if (options.remove_globals) {\n                    // Remove declarations\n                    rule.walkDecls(function(decl) {\n                        if (decl.prop.indexOf(NTH_GLOBAL_PREFIX) === 0) {\n                            decl.remove();\n                        }\n                    });\n\n                    // Remove root element if empty\n                    if (rule.nodes.length === 0) {\n                        rule.remove();\n                    }\n                }\n            }\n\n            // Nth-Grid blocks\n            if (rule.selector === NTH_SELECTOR) {\n                const nthRule     = rule;\n                const nthSelector = nthRule.parent.selector;\n                const settings    = {};\n\n                // Nth-Grid Variables\n                // -------------------------------------------------------------\n                // Add semicolon to last declaration\n                nthRule.parent.raws.semicolon = true;\n\n                // Loop through nth-grid declaration and update settings\n                nthRule.walkDecls(function(decl) {\n                    const key = decl.prop.replace(/-/g, '_');\n                    const arr = decl.value.split(' ').map(function(val){\n                        return normalize(val);\n                    });\n\n                    // Add to settings object\n                    settings[key] = arr.length > 1 ? arr : arr[0];\n                });\n\n                // Get grid settings and store as object\n                const grid = new Grid(settings, options);\n\n                // Create placeholder containers for all generated css.\n                // By adding new nodes to these containers first and then moving\n                // the child nodes after css generation is complete we can use\n                // 'append' instead of 'insert' and ensure new css content is\n                // added in the correct order and respect the position of the\n                // declarations that proceed the nth-grid block.\n                const selectorContainer = nthRule.cloneAfter({ selector: 'nth-grid-output' })\n                    .removeAll();\n\n                // Create placeholder rule for all generated css\n                const siblingContainer = nthRule.clone({ selector: 'nth-grid-sibling-output' })\n                    .removeAll();\n\n                nthRule.parent.after(siblingContainer);\n\n                // Nth-Grid CSS\n                // -------------------------------------------------------------\n                // Generate content within placeholder containers\n                gridContainer(grid, nthSelector, selectorContainer, siblingContainer);\n                gridColumns(grid, nthSelector, selectorContainer, siblingContainer);\n                gridOverlay(grid, nthSelector, selectorContainer, siblingContainer);\n                gridDebug(grid, nthSelector, selectorContainer, siblingContainer);\n\n                // Convert rem values to px for legacy browsers\n                if (grid.float_legacy) {\n                    // Loop through containers\n                    [selectorContainer, siblingContainer].forEach(function(container) {\n                        container.walk(function(node) {\n                            if (node.value && getUnit(node.value) === 'rem') {\n                                const pxVal = getNumber(node.value) * grid.rem_base + 'px';\n\n                                node.parent.insertBefore(node, node.clone({ prop: node.prop, value: pxVal }));\n                            }\n                        });\n                    });\n                }\n\n                // Loop through containers\n                [selectorContainer, siblingContainer].forEach(function(container) {\n                    container.each(function(node) {\n                        // Set each node's source to the nthRule source\n                        node.source = nthRule.source;\n                        // Move the node\n                        container.before(node);\n                    });\n                    // Remove the container\n                    container.remove();\n                });\n\n                // Remove nth-grid block\n                nthRule.remove();\n            }\n        });\n    };\n});\n"],"names":["reNotLength","reNumber","reUnit","rounding","value","falseValue","vars","test","match","toString","number","length","Number","unit","stringMath","expression","Function","arr","operator","finalUnit","nums","i","num","getNumber","getUnit","console","log","push","trim","replace","result","join","concat","settings","column","order","offset","sibling_val","calc","offset_vals","sibling_gaps","sibling_ratio_cols","sibling_unit_cols","columns_normalized","gap_h","grid_col_width","column_width","unitMath","matchUnit","Grid","options","this","defaults","columns","gap","margin","direction","flex","flex_legacy","float","float_legacy","debug","debug_background_color","debug_text_color","overlay","overlay_column_color","overlay_margin_color","overlay_text_color","rem_base","remove_warnings","warnings","settings_private","width","auto_width","columns_ratio","columns_unit","grid_col_ratio","grid_width","margin_h","order_offsets","total_columns","total_ratio_columns","total_unit_columns","opt","priv","key","Array","gap_v","margin_v","dir_left","dir_right","val","grid_gaps","grid_margins","isMatched","isUnitMatch","isMatchedGrid","isPercentGrid","grid_unit_cols","col_val","j","order_val","column_offset","getOrderOffset","order_offset","selectorList","appendText","split","map","selector","decimals","Math","round","overlayContent","grid","container","content","selectorBefore","sel","append","postcss","rule","prop","gridColumns","nthSelector","selectorContainer","siblingContainer","newRule","warn","appendSelectors","forEach","columnVal","nthCol","indexOf","columnWidth","orderVal","gridContainer","gridDebug","debugContent","text","gridOverlay","overlayFontSize","toLowerCase","plugin","NTH_GLOBAL_PREFIX","NTH_SELECTOR","css","walkRules","walkDecls","decl","normalize","remove_globals","remove","nodes","nthRule","parent","raws","semicolon","cloneAfter","removeAll","clone","after","walk","node","pxVal","insertBefore","each","source","before"],"mappings":"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"}