{"version":3,"file":"less-plugin-nth-grid.js","sources":["../../src/postcss/lib/vars.js","../../src/postcss/util/get-number.js","../../src/postcss/util/get-unit.js","../../src/postcss/util/unit-math.js","../../src/postcss/util/get-order-offset.js","../../src/postcss/util/is-unit-match.js","../../src/postcss/lib/grid.js","../../src/less/plugin/lib/to-value.js","../../src/less/plugin/lib/to-array.js","../../src/less/plugin/lib/to-tree.js","../../src/less/plugin/index.js"],"sourcesContent":["// Exports\n// =============================================================================\nexport default {\n    // reNotLength: /[^\\w\\%\\.\\-]/,\n    reNotLength: /[^\\w%.-]/,\n    reNumber   : /^[-+]?[0-9]*\\.?[0-9]+/,\n    reUnit     : /[a-z|%]+$/,\n    rounding   : 5\n};\n","// Dependencies\n// =============================================================================\nimport vars from '../lib/vars';\n\n\n// Exports\n// =============================================================================\n// Get number in string (e.g. '12rem' => 12)\nexport default function(value, falseValue) {\n    if (vars.reNotLength.test(value)) {\n        return false;\n    }\n    else {\n        const match  = value.toString().match(vars.reNumber) || false;\n        const number = match.length ? Number(match) * 1 : falseValue || false;\n\n        return number;\n    }\n}\n","// Dependencies\n// =============================================================================\nimport vars from '../lib/vars';\n\n\n// Exports\n// =============================================================================\n// Get unit in string (e.g. '12rem' => 'rem')\nexport default function(value, falseValue) {\n    if (vars.reNotLength.test(value)) {\n        return false;\n    }\n    else {\n        const match = value.toString().match(vars.reUnit) || false;\n        const unit  = match.length ? match.toString() : falseValue || false;\n\n        return unit;\n    }\n}\n","// Dependencies\n// =============================================================================\nimport getNumber from './get-number';\nimport getUnit   from './get-unit';\n\n\n// Exports\n// =============================================================================\n// Allows for basic math on string lengths (numbers with with units)\n// Ex: unitMath(['1rem', '1rem'], ' + ') /* '2rem' */\nexport default function(arr, operator) {\n    let   finalUnit = '';\n    const nums      = [];\n\n    // Loop through array values\n    for (let i = 0; i < arr.length; i++) {\n        const num  = getNumber(arr[i]);\n        const unit = getUnit(arr[i]);\n\n        // Ignore zero value units\n        if (num !== 0) {\n            // Verify math compatibility and store unit\n            if (unit.length) {\n                if (finalUnit.length && unit !== finalUnit) {\n                    // eslint-disable-next-line\n                    console.log(`NTH-GRID: Incompatible unitMath() arguments: ${arr}`);\n\n                    return 0;\n                }\n                else {\n                    finalUnit = unit;\n                }\n            }\n        }\n\n        // Add item to numbers array\n        nums.push(num);\n    }\n\n    // Cleanse operator\n    // operator = operator.trim().replace(/[^\\+\\-\\*\\/().\\d\\s]/g, '');\n    operator = operator.trim().replace(/[^+\\-*/().\\d\\s]/g, '');\n\n    // Return result\n    const result = nums.length ? eval(nums.join(operator)).toString().concat(finalUnit) : 0; // jshint ignore:line\n\n    // Convert zero to number\n    return Number(result) === 0 ? 0 : result;\n}\n","// Dependencies\n// =============================================================================\nimport unitMath from '../util/unit-math';\n\n// Exports\n// =============================================================================\n// Calculates columns offset for source ordering.\n// Note that IE9 truncates css values after 128 characters. Grid columms\n// that require an offset using a calc() string longer than this will\n// not render properly.\nexport default function(settings, column, order) {\n    let offset = 0, i;\n\n    // Only columns following the first need offset calculated\n    if (column > 1) {\n        let sibling_val;\n\n        // Calc() required\n        if (settings.calc) {\n            // Store sibling ratio column and gutter counts.\n            // Used to generate the shortest possible calc() strings\n            const offset_vals       = [];\n            let sibling_gutters     = 0;\n            let sibling_ratio_cols  = 0;\n            const sibling_unit_cols = [];\n\n            // Loop through all preceding columns\n            for (i = 0; i < (column - 1); i++) {\n                // Get sibling values from columns_normalized or order\n                if (order) {\n                    sibling_val = settings.columns_normalized[order[i] - 1];\n                }\n                else {\n                    sibling_val = settings.columns_normalized[i];\n                }\n\n                // Gutter\n                if (settings.gutter_h !== 0) {\n                    sibling_gutters += 1;\n                }\n\n                // Ratio-based value\n                if (Number(sibling_val)) {\n                    sibling_ratio_cols += Number(sibling_val);\n                }\n                // Unit-based value\n                else {\n                    sibling_unit_cols.push(sibling_val);\n                }\n            }\n\n            // Ratio offset\n            if (sibling_ratio_cols > 0) {\n                if (sibling_ratio_cols === 1) {\n                    offset_vals.push(settings.grid_col_width);\n                }\n                else {\n                    offset_vals.push('((' + settings.grid_col_width + ') * ' + sibling_ratio_cols + ')');\n                }\n            }\n\n            // Unit offset\n            if (sibling_unit_cols.length > 0) {\n                offset_vals.push(sibling_unit_cols.join(' + '));\n            }\n\n            // Gutter offset\n            if (sibling_gutters > 0) {\n                if (sibling_gutters === 1) {\n                    offset_vals.push(settings.gutter_h);\n                }\n                else {\n                    offset_vals.push('(' + settings.gutter_h + ' * ' + sibling_gutters + ')');\n                }\n            }\n\n            // Final offset\n            offset = offset_vals.join(' + ');\n        }\n        // Calc() not required\n        else {\n            let column_width;\n\n            // Loop through all preceding columns\n            for (i = 0; i < (column - 1); i++) {\n                // Get sibling values from columns_normalized or order\n                if (order) {\n                    sibling_val = settings.columns_normalized[order[i] - 1];\n                }\n                else {\n                    sibling_val = settings.columns_normalized[i];\n                }\n\n                // Add ratio-based value\n                if (Number(sibling_val)) {\n                    const grid_col_width = settings.grid_col_width;\n\n                    column_width = unitMath([grid_col_width, sibling_val], ' * ');\n                    offset       = unitMath([offset, column_width, settings.gutter_h], ' + ');\n                }\n                // Add unit-based value\n                else {\n                    column_width = unitMath([sibling_val, settings.gutter_h], ' + ');\n                    offset       = unitMath([offset, column_width], ' + ');\n                }\n            }\n        }\n    }\n\n    return offset;\n}\n","// Dependencies\n// =============================================================================\nimport getNumber from './get-number';\nimport getUnit   from './get-unit';\n\n\n// Exports\n// =============================================================================\n// Compare units of array items, ignoring zero values w/o units\nexport default function(arr, matchUnit) {\n    // Return false if value os not a valid length (e.g. calc)\n    if (!getNumber(arr[0]) && !getUnit(arr[0])) {\n        return false;\n    }\n    // Get matching unit from first item if unspecified\n    else if (!matchUnit) {\n        matchUnit = getUnit(arr[0]);\n    }\n\n    // Loop through array values\n    for (let i = 0; i < arr.length; i++) {\n        const num  = getNumber(arr[i]);\n        const unit = num !== 0 ? getUnit(arr[i]) : false;\n\n        // Return false if value is not a valid length (e.g. calc)\n        if (num === false && unit === false) {\n            return false;\n        }\n        // Return false if units do not match\n        if (num !== 0 && unit !== matchUnit) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","// Dependencies\n// =============================================================================\nimport getOrderOffset from '../util/get-order-offset';\nimport getUnit        from '../util/get-unit';\nimport isUnitMatch    from '../util/is-unit-match';\nimport unitMath       from '../util/unit-math';\n\n\n// Exports\n// =============================================================================\n// Generates new object containing grid properties\nexport default function Grid(settings, options) {\n    options = options || {};\n\n    // Protect against instantiating without `new` keyword\n    if (!(this instanceof Grid)) {\n        return new Grid(settings, options);\n    }\n\n    // Nth-Grid Defaults\n    const defaults = {\n        // Layout\n        columns               : [1],\n        gutter                : 0,\n        margin                : 0,\n        center                : true,\n        eqheight              : false,\n        valign                : false,\n        direction             : 'ltr',\n        legacy                : false,\n\n        // Debug\n        debug                 : false,\n        debug_background_color: '#000',\n        debug_text_color      : '#ccc',\n\n        // Overlay\n        overlay               : false,\n        overlay_column_color  : '#7c48c3',\n        overlay_margin_color  : '#dabfff',\n        overlay_text_color    : '#fff',\n\n        // Compilation\n        rem_base              : 16,\n        remove_warnings       : true,\n        warnings              : true\n    };\n\n    // Private defaults\n    const settings_private = {\n        width                 : '100%',\n        order                 : false,\n        auto_width            : null,\n        calc                  : null,\n        columns_ratio         : [],\n        columns_unit          : [],\n        grid_col_ratio        : 0,\n        grid_col_width        : 0,\n        grid_width            : null,\n        gutter_h              : 0,\n        columns_normalized    : [],\n        margin_h              : 0,\n        order_offsets         : [],\n        total_columns         : 0,\n        total_ratio_columns   : 0,\n        total_unit_columns    : 0\n    };\n\n    // Update defaults with global options\n    for (const opt in options) {\n        if (opt in defaults) {\n            defaults[opt] = options[opt];\n        }\n    }\n\n    // Add private properties to settings\n    // Adding these after the global options prevents setting private\n    // settings via CSS or JS globals\n    for (const priv in settings_private) {\n        if (!(priv in settings)) {\n            settings[priv] = settings_private[priv];\n        }\n    }\n\n    // Add missing properties from defaults to settings\n    for (const key in defaults) {\n        if (!(key in settings)) {\n            settings[key] = defaults[key];\n        }\n    }\n\n    // Convert single-value columns layout and order settings to arrays\n    settings.columns = settings.columns instanceof Array ? settings.columns : [settings.columns];\n    settings.order = settings.order instanceof Array ? settings.order : settings.order !== false ? [settings.order] : settings.order;\n\n    // Extract horizontal gutter and margin from arrays\n    settings.gutter_h = settings.gutter instanceof Array ? (settings.gutter[1] || settings.gutter[0]) : settings.gutter;\n    settings.gutter_v = settings.gutter instanceof Array ? settings.gutter[0] : settings.gutter;\n    settings.margin_h = settings.margin instanceof Array ? (settings.margin[1] || settings.margin[0]) : settings.margin;\n    settings.margin_v = settings.margin instanceof Array ? settings.margin[0] : settings.margin;\n\n    // Direction\n    settings.dir_left  = settings.direction === 'rtl' ? 'right' : 'left';\n    settings.dir_right = settings.direction === 'rtl' ? 'left' : 'right';\n\n\n    // Populate settings\n    // ---------------------------------------------------------------------\n    let i;\n\n    // Ratio- and unit-based column lists\n    for (i = 0; i < settings.columns.length; i++) {\n        const val = settings.columns[i];\n\n        if (Number(val)) {\n            settings.columns_ratio.push(Number(val));\n        }\n        else {\n            settings.columns_unit.push(val);\n        }\n    }\n\n    // Total column count\n    settings.total_ratio_columns = settings.columns_ratio.length === 1 ? settings.columns_ratio[0] : settings.columns_ratio.length;\n    settings.total_unit_columns  = settings.columns_unit.length;\n    settings.total_columns       = settings.total_ratio_columns + settings.total_unit_columns;\n\n    // Calculate combined grid gutter and margin\n    let grid_gutters = unitMath([settings.gutter_h, (settings.total_columns - 1)], ' * '),\n        grid_margins = unitMath([settings.margin_h, 2], ' * ');\n\n    // Grid ratio\n    if (settings.columns_ratio.length === 1) {\n        settings.grid_col_ratio = settings.columns_ratio[0];\n    }\n    else {\n        settings.grid_col_ratio = 0;\n\n        // Sum ratio based column values\n        for (i = 0; i < settings.columns_ratio.length; i++) {\n            settings.grid_col_ratio += settings.columns_ratio[i];\n        }\n    }\n\n    // Are all units matched?\n    const isMatched = isUnitMatch([]\n        .concat(settings.width)\n        .concat(settings.columns_unit)\n        .concat(settings.gutter)\n        .concat(settings.margin));\n\n    // All all grid units matched?\n    const isMatchedGrid = settings.columns_ratio.length === 0 && isUnitMatch([]\n        .concat(settings.columns_unit)\n        .concat(settings.gutter)\n        .concat(settings.margin));\n\n    // Are all grid values percent?\n    const isPercentGrid = isUnitMatch([]\n        .concat(settings.columns_unit)\n        .concat(settings.gutter)\n        .concat(settings.margin), '%');\n\n    // Calc() required?\n    settings.calc = !(isMatched || isMatchedGrid || isPercentGrid);\n\n    // Grid container auto width\n    if (settings.columns_ratio.length === 0) {\n        // Calc() required\n        if (settings.calc) {\n            const grid_unit_cols = isUnitMatch(settings.columns_unit) ? unitMath(settings.columns_unit, ' + ') : settings.columns_unit.join(' + ');\n\n            // Matched gutter & margin units\n            if (settings.gutter_h !== 0 && settings.margin_h !== 0 && isUnitMatch([grid_gutters, grid_margins])) {\n                settings.auto_width = grid_unit_cols + ' + ' + unitMath([grid_gutters, grid_margins], ' + ');\n            }\n            // Matched column and gutter units\n            else if (settings.gutter_h !== 0 && isUnitMatch([grid_unit_cols, grid_gutters])) {\n                settings.auto_width = unitMath([grid_unit_cols, grid_gutters], ' + ') + ' + ' + (settings.margin_h !== 0 ? grid_margins : '');\n            }\n            // Matched column and margin units\n            else if (settings.margin_h !== 0 && isUnitMatch([grid_unit_cols, grid_margins])) {\n                settings.auto_width = unitMath([grid_unit_cols, grid_margins], ' + ') + ' + ' + (settings.gutter_h !== 0 ? grid_gutters : '');\n            }\n            // No match\n            else {\n                settings.auto_width = grid_unit_cols;\n\n                // Add gutters\n                if (settings.gutter_h !== 0) {\n                    settings.auto_width += ' + ' + grid_gutters;\n                }\n\n                // Add margins\n                if (settings.margin_h !== 0) {\n                    settings.auto_width += ' + ' + grid_margins;\n                }\n            }\n        }\n        // Calc() not required\n        else {\n            // Unit-based columns\n            settings.auto_width = unitMath(settings.columns_unit, ' + ');\n\n            // Add gutters and margins\n            settings.auto_width = unitMath([settings.auto_width, grid_gutters, grid_margins], ' + ');\n        }\n    }\n\n    // Ratio grid width - Calc() required\n    // Grid width of 99.99% used for sub-pixel rendering bug (e.g. IE9, Chrome < 38)\n    if (settings.calc) {\n        // Single unit-based column\n        if (settings.columns_unit.length === 1) {\n            settings.grid_width = '99.99% - ' + settings.columns_unit[0];\n        }\n        // Multiple unit-based columns\n        else if (settings.columns_unit.length > 1) {\n            // Matched units\n            if (isUnitMatch(settings.columns_unit)) {\n                settings.grid_width = '99.99% - ' + unitMath(settings.columns_unit, ' + ');\n            }\n            // Mixed units\n            else {\n                settings.grid_width = '99.99% - (' + settings.columns_unit.join(' + ') + ')';\n            }\n        }\n        // No unit-based columns\n        else {\n            settings.grid_width = '99.99%';\n        }\n    }\n    // Ratio grid width - Calc() not required\n    else {\n        if (isMatched && getUnit(settings.width) !== '%') {\n            settings.grid_width = settings.width;\n\n            // Subtract unit-based column values from width\n            if (settings.columns_unit.length) {\n                settings.grid_width = unitMath([settings.grid_width, unitMath(settings.columns_unit, ' + ')], ' - ');\n            }\n        }\n        else if (isPercentGrid) {\n            settings.grid_width = '100%';\n\n            // Subtract unit-based column values from width\n            if (settings.columns_unit.length) {\n                settings.grid_width = unitMath([settings.grid_width, unitMath(settings.columns_unit, ' + ')], ' - ');\n            }\n        }\n        else {\n            settings.grid_width = '100%';\n        }\n    }\n\n    // Ratio-based column width\n    if (settings.total_ratio_columns > 0) {\n        // Calc() required\n        if (settings.calc) {\n            // Matched gutter and margin units\n            if (settings.gutter_h !== 0 && settings.margin_h !== 0 && isUnitMatch([settings.gutter_h, settings.margin_h])) {\n                settings.grid_col_width = settings.grid_width + ' - ' + unitMath([grid_gutters, grid_margins], ' + ');\n            }\n            // Matched column and gutter units\n            else if (settings.gutter_h !== 0 && isUnitMatch([settings.grid_width, grid_gutters])) {\n                settings.grid_col_width = unitMath([settings.grid_width, grid_gutters], ' - ');\n\n                if (grid_margins !== 0) {\n                    settings.grid_col_width += ' - ' + grid_margins;\n                }\n            }\n            // Matched column and margin units\n            else if (settings.margin_h !== 0 && isUnitMatch([settings.grid_width, grid_margins])) {\n                settings.grid_col_width = unitMath([settings.grid_width, grid_margins], ' - ');\n\n                if (grid_gutters !== 0) {\n                    settings.grid_col_width += ' - ' + grid_gutters;\n                }\n            }\n            // No match\n            else {\n                grid_gutters = settings.gutter_h !== 0 ? ' - ' + grid_gutters : '';\n                grid_margins = settings.margin_h !== 0 ? ' - ' + grid_margins : '';\n\n                settings.grid_col_width = settings.grid_width + grid_gutters + grid_margins;\n            }\n\n            // Divide by grid ratio\n            settings.grid_col_width = '(' + settings.grid_col_width + ') / ' + settings.grid_col_ratio;\n        }\n        // Calc() not required\n        else {\n            // Calculate grid width without gutters and margins\n            settings.grid_col_width = unitMath([settings.grid_width, grid_gutters, grid_margins], ' - ');\n\n            // Divide by grid ratio\n            settings.grid_col_width = unitMath([settings.grid_col_width, settings.grid_col_ratio], ' / ');\n        }\n    }\n\n    // Calculate ordered column offsets\n    if (settings.order && settings.order.length <= settings.total_columns) {\n        // Expand single ratio-value column to multi-column\n        // Ex: nth-grid(6) /* columns_normalized: 1 1 1 1 1 1 */\n        if (settings.columns_ratio.length === 1) {\n            for (i = 0; i < settings.columns.length; i++) {\n                const col_val = settings.columns[i];\n                const num     = Number(col_val) || false;\n\n                // Single ratio-based value\n                if (num) {\n                    for (let j = 0; j < num; j++) {\n                        settings.columns_normalized.push(1);\n                    }\n                }\n                // Other values\n                else {\n                    settings.columns_normalized.push(col_val);\n                }\n            }\n        }\n        else {\n            settings.columns_normalized = settings.columns;\n        }\n\n        // Loop through order\n        for (i = 0; i < settings.order.length; i++) {\n            let offset    = 0;\n            const order_val = settings.order[i];\n\n            // Get offset of the order column value in the original column layout\n            // Ex: Column 3 offset in original @columns\n            const column_offset = getOrderOffset(settings, order_val);\n\n            // Get offset of the order column number in the ordered column layout\n            // Ex: Column 3 offset in $order 3 2 1 (1st position)\n            const order_offset = getOrderOffset(settings, i + 1, settings.order);\n\n            // Set final offset values in array\n            if (order_offset !== column_offset) {\n                // Calc() required\n                if (settings.calc) {\n                    if (order_offset === 0) {\n                        offset = '0px - (' + column_offset + ')';\n                    }\n                    else if (column_offset === 0) {\n                        offset = order_offset;\n                    }\n                    else {\n                        offset = '(' + order_offset + ') - (' + column_offset + ')';\n                    }\n                }\n                // Calc() not required\n                else {\n                    offset = unitMath([order_offset, column_offset], ' - ');\n                }\n            }\n\n            // Push value to order offset array\n            settings.order_offsets.push(offset);\n        }\n    }\n\n    // Return settings object\n    return settings;\n}\n","// Dependencies\n// =============================================================================\nimport toArray from './to-array';\n\n\n// Exports\n// =============================================================================\n// Converts Less tree object to javascript string, array, boolean, etc.\nexport default function toValue(obj) {\n    // Keyword\n    if (obj.type === 'Keyword') {\n        return obj.value;\n    }\n    // Dimension (number & unit)\n    else if (obj.type === 'Dimension') {\n        // Ignore units for zero values (e.g. 0px = 0);\n        if (obj.value === 0) {\n            return obj.value;\n        }\n        // Append unit to value\n        else {\n            return obj.value.toString().concat(obj.unit);\n        }\n    }\n    // Expression (array)\n    else if (obj.type === 'Expression') {\n        toArray(obj);\n    }\n    // Unknown\n    else {\n        // eslint-disable-next-line\n        console.log(`Unknown type: ${obj.type} Returning value: ${obj.value}`);\n        // eslint-disable-next-line\n        console.log(JSON.stringify(obj));\n\n        return obj;\n    }\n}\n","// Dependencies\n// =============================================================================\nimport toValue from './to-value';\n\n\n// Exports\n// =============================================================================\n// Converts Less tree object to javascript array of values\nexport default function toArray(obj) {\n    if (obj.type === 'Expression') {\n        const arr = [];\n\n        for (let i = 0; i < obj.value.length; i++) {\n            arr.push(toValue(obj.value[i]));\n        }\n\n        return arr;\n    }\n    else {\n        const value = toValue(obj);\n\n        return [value];\n    }\n}\n","/* global tree */\n\n// Dependencies\n// =============================================================================\nimport getNumber from '../../../postcss/util/get-number';\nimport getUnit   from '../../../postcss/util/get-unit';\n\n\n// Exports\n// =============================================================================\n// Converts javascript string, array, boolean, etc. to Less tree object\nexport default function toTree(value) {\n    // Boolean => Keyword\n    if (typeof(value) === 'boolean') {\n        return new tree.Keyword(value.toString());\n    }\n    // Array => Expression\n    else if (value instanceof Array) {\n        const arr = [];\n\n        for (let i = 0; i < value.length; i++) {\n            arr.push(toTree(value[i]));\n        }\n\n        return new tree.Expression(arr);\n    }\n    // Number => Dimension\n    else if (typeof value === 'number') {\n        return new tree.Dimension(value);\n    }\n    // Strings\n    else if (value !== null) {\n        const num  = getNumber(value);\n        const unit = getUnit(value);\n\n        // => Dimension (number & unit)\n        if (num !== false && unit !== false) {\n            return new tree.Dimension(num, unit);\n        }\n        // => Number\n        else if (num !== false) {\n            return new tree.Dimension(num);\n        }\n        // => String\n        else {\n            return new tree.Anonymous(value);\n        }\n    }\n    // Null\n    else {\n        return new tree.Anonymous(value);\n    }\n}\n","/* global functions, tree */\n\n// =============================================================================\n// Less Plugin Documentation (not easy to find, but these links help)\n// =============================================================================\n// Source\n// -----------------------------------------------------------------------------\n// https://github.com/less/less.js/tree/master/lib/less/tree\n// https://github.com/less/less.js/tree/master/test/less/plugin\n\n// Links\n// -----------------------------------------------------------------------------\n// https://github.com/less/less.js/issues/1861\n// https://github.com/less/less-docs/issues/328\n// https://github.com/less/less.js/pull/2479\n// https://github.com/less/less.js/pull/2522\n// https://github.com/less/less.js/issues/1862\n\n// Dependencies\n// =============================================================================\nimport Grid    from '../../postcss/lib/grid';\nimport toArray from './lib/to-array';\nimport toTree  from './lib/to-tree';\nimport toValue from './lib/to-value';\n\n\n// Plugin\n// =============================================================================\nlet settings;\n\nconst api = {\n    // Log message to console\n    'nth-log': function(lessTreeObj) {\n        // eslint-disable-next-line\n        console.log(`Nth-Grid: ${lessTreeObj.value}`);\n\n        return false;\n    },\n    // Log warning message to console\n    'nth-warn': function(lessTreeObj) {\n        // eslint-disable-next-line\n        console.warn(`Nth-Grid: ${lessTreeObj.value}`);\n\n        return false;\n    },\n    // Creates Grid instance\n    'nth-grid': function(columns, gutter, margin, width, order) {\n        // Convert Less tree objects to standard JavaScript types\n        settings = {\n            columns: toArray(columns),\n            gutter : toArray(gutter),\n            margin : toArray(margin),\n            width  : toValue(width),\n            order  : order.type === 'Expression' ? toArray(order) : false\n        };\n\n        settings = new Grid(settings);\n\n        // Send return value (warning message displayed if not true)\n        return new tree.Keyword('true');\n    },\n    // Returns value from Grid instance\n    'nth-get': function(lessTreeObj) {\n        const key = lessTreeObj.value;\n\n        // Check if key exists\n        if (key in settings) {\n            // Return Less tree object\n            return toTree(settings[key]);\n        }\n        // Invalid key\n        else {\n            // eslint-disable-next-line\n            console.log(`NTH-GRID: ${key} is not a valid key.`);\n        }\n    }\n};\n\n// Add functions to Less registry\nfunctions.addMultiple(api);\n"],"names":["value","falseValue","vars","reNotLength","test","match","toString","reNumber","number","length","Number","reUnit","unit","arr","operator","finalUnit","nums","i","num","getNumber","getUnit","log","push","trim","replace","result","eval","join","concat","settings","column","order","offset","sibling_val","calc","offset_vals","sibling_gutters","sibling_ratio_cols","sibling_unit_cols","columns_normalized","gutter_h","grid_col_width","column_width","unitMath","matchUnit","Grid","options","this","defaults","settings_private","opt","priv","key","columns","Array","gutter","gutter_v","margin_h","margin","margin_v","dir_left","direction","dir_right","val","columns_ratio","columns_unit","total_ratio_columns","total_unit_columns","total_columns","grid_gutters","grid_margins","grid_col_ratio","isMatched","isUnitMatch","width","isMatchedGrid","isPercentGrid","grid_unit_cols","auto_width","grid_width","col_val","j","order_val","column_offset","getOrderOffset","order_offset","order_offsets","toValue","obj","type","JSON","stringify","toArray","toTree","tree","Keyword","Expression","Dimension","Anonymous","api","lessTreeObj","warn","functions","addMultiple"],"mappings":"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"}