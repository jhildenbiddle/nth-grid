{"version":3,"file":"less-plugin-nth-grid.js","sources":["../../src/postcss/lib/vars.js","../../src/postcss/util/get-number.js","../../src/postcss/util/get-unit.js","../../src/postcss/util/unit-math.js","../../src/postcss/util/get-order-offset.js","../../src/postcss/util/is-unit-match.js","../../src/postcss/lib/grid.js","../../src/less/plugin/lib/to-value.js","../../src/less/plugin/lib/to-array.js","../../src/less/plugin/lib/to-tree.js","../../src/less/plugin/index.js"],"sourcesContent":["// Exports\n// =============================================================================\nexport default {\n    // reNotLength: /[^\\w\\%\\.\\-]/,\n    reNotLength: /[^\\w%.-]/,\n    reNumber   : /^[-+]?[0-9]*\\.?[0-9]+/,\n    reUnit     : /[a-z|%]+$/,\n    rounding   : 5\n};\n","// Dependencies\n// =============================================================================\nimport vars from '../lib/vars';\n\n\n// Exports\n// =============================================================================\n// Get number in string (e.g. '12rem' => 12)\nexport default function(value, falseValue) {\n    if (vars.reNotLength.test(value)) {\n        return false;\n    }\n    else {\n        const match  = value.toString().match(vars.reNumber) || false;\n        const number = match.length ? Number(match) * 1 : falseValue || false;\n\n        return number;\n    }\n}\n","// Dependencies\n// =============================================================================\nimport vars from '../lib/vars';\n\n\n// Exports\n// =============================================================================\n// Get unit in string (e.g. '12rem' => 'rem')\nexport default function(value, falseValue) {\n    if (vars.reNotLength.test(value)) {\n        return false;\n    }\n    else {\n        const match = value.toString().match(vars.reUnit) || false;\n        const unit  = match.length ? match.toString() : falseValue || false;\n\n        return unit;\n    }\n}\n","// Dependencies\n// =============================================================================\nimport getNumber from './get-number';\nimport getUnit   from './get-unit';\n\n\n// Functions\n// =============================================================================\n// Calculates string as mathematical expression. Used instead of eval to avoid\n// console warning on compilation.\nfunction stringMath(expression) {\n    return new Function('return ' + expression)();\n}\n\n\n// Exports\n// =============================================================================\n// Allows for basic math on string lengths (numbers with with units)\n// Ex: unitMath(['1rem', '1rem'], ' + ') /* '2rem' */\nexport default function(arr, operator) {\n    let   finalUnit = '';\n    const nums      = [];\n\n    // Loop through array values\n    for (let i = 0; i < arr.length; i++) {\n        const num  = getNumber(arr[i]);\n        const unit = getUnit(arr[i]);\n\n        // Ignore zero value units\n        if (num !== 0) {\n            // Verify math compatibility and store unit\n            if (unit.length) {\n                if (finalUnit.length && unit !== finalUnit) {\n                    // eslint-disable-next-line\n                    console.log(`NTH-GRID: Incompatible unitMath() arguments: ${arr}`);\n\n                    return 0;\n                }\n                else {\n                    finalUnit = unit;\n                }\n            }\n        }\n\n        // Add item to numbers array\n        nums.push(num);\n    }\n\n    // Cleanse operator\n    operator = operator.trim().replace(/[^+\\-*/().\\d\\s]/g, '');\n\n    // Calculate result\n    const result = nums.length ? stringMath(nums.join(operator)).toString().concat(finalUnit) : 0; // jshint ignore:line\n\n    // Convert zero to number\n    return Number(result) === 0 ? 0 : result;\n}\n","// Dependencies\n// =============================================================================\nimport unitMath from '../util/unit-math';\n\n// Exports\n// =============================================================================\n// Calculates columns offset for source ordering.\n// Note that IE9 truncates css values after 128 characters. Grid columms\n// that require an offset using a calc() string longer than this will\n// not render properly.\nexport default function(settings, column, order) {\n    let offset = 0, i;\n\n    // Only columns following the first need offset calculated\n    if (column > 1) {\n        let sibling_val;\n\n        // Calc() required\n        if (settings.calc) {\n            // Store sibling ratio column and gap counts.\n            // Used to generate the shortest possible calc() strings\n            const offset_vals       = [];\n            let sibling_gaps        = 0;\n            let sibling_ratio_cols  = 0;\n            const sibling_unit_cols = [];\n\n            // Loop through all preceding columns\n            for (i = 0; i < (column - 1); i++) {\n                // Get sibling values from columns_normalized or order\n                if (order) {\n                    sibling_val = settings.columns_normalized[order[i] - 1];\n                }\n                else {\n                    sibling_val = settings.columns_normalized[i];\n                }\n\n                // Gap\n                if (settings.gap_h !== 0) {\n                    sibling_gaps += 1;\n                }\n\n                // Ratio-based value\n                if (Number(sibling_val)) {\n                    sibling_ratio_cols += Number(sibling_val);\n                }\n                // Unit-based value\n                else {\n                    sibling_unit_cols.push(sibling_val);\n                }\n            }\n\n            // Ratio offset\n            if (sibling_ratio_cols > 0) {\n                if (sibling_ratio_cols === 1) {\n                    offset_vals.push(settings.grid_col_width);\n                }\n                else {\n                    offset_vals.push('((' + settings.grid_col_width + ') * ' + sibling_ratio_cols + ')');\n                }\n            }\n\n            // Unit offset\n            if (sibling_unit_cols.length > 0) {\n                offset_vals.push(sibling_unit_cols.join(' + '));\n            }\n\n            // Gap offset\n            if (sibling_gaps > 0) {\n                if (sibling_gaps === 1) {\n                    offset_vals.push(settings.gap_h);\n                }\n                else {\n                    offset_vals.push('(' + settings.gap_h + ' * ' + sibling_gaps + ')');\n                }\n            }\n\n            // Final offset\n            offset = offset_vals.join(' + ');\n        }\n        // Calc() not required\n        else {\n            let column_width;\n\n            // Loop through all preceding columns\n            for (i = 0; i < (column - 1); i++) {\n                // Get sibling values from columns_normalized or order\n                if (order) {\n                    sibling_val = settings.columns_normalized[order[i] - 1];\n                }\n                else {\n                    sibling_val = settings.columns_normalized[i];\n                }\n\n                // Add ratio-based value\n                if (Number(sibling_val)) {\n                    const grid_col_width = settings.grid_col_width;\n\n                    column_width = unitMath([grid_col_width, sibling_val], ' * ');\n                    offset       = unitMath([offset, column_width, settings.gap_h], ' + ');\n                }\n                // Add unit-based value\n                else {\n                    column_width = unitMath([sibling_val, settings.gap_h], ' + ');\n                    offset       = unitMath([offset, column_width], ' + ');\n                }\n            }\n        }\n    }\n\n    return offset;\n}\n","// Dependencies\n// =============================================================================\nimport getNumber from './get-number';\nimport getUnit   from './get-unit';\n\n\n// Exports\n// =============================================================================\n// Compare units of array items, ignoring zero values w/o units\nexport default function(arr, matchUnit) {\n    // Return false if value is not a valid length (e.g. calc)\n    if (!getNumber(arr[0]) && !getUnit(arr[0])) {\n        return false;\n    }\n    // Get matching unit from first item if unspecified\n    else if (!matchUnit) {\n        matchUnit = getUnit(arr[0]);\n    }\n\n    // Loop through array values\n    for (let i = 0; i < arr.length; i++) {\n        const num  = getNumber(arr[i]);\n        const unit = num !== 0 ? getUnit(arr[i]) : false;\n\n        // Return false if value is not a valid length (e.g. calc)\n        if (num === false && unit === false) {\n            return false;\n        }\n        // Return false if units do not match\n        if (num !== 0 && unit !== matchUnit) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","// Dependencies\n// =============================================================================\nimport getOrderOffset from '../util/get-order-offset';\nimport getUnit        from '../util/get-unit';\nimport isUnitMatch    from '../util/is-unit-match';\nimport unitMath       from '../util/unit-math';\n\n\n// Exports\n// =============================================================================\n// Generates new object containing grid properties\nexport default function Grid(settings, options) {\n    options = options || {};\n\n    // Protect against instantiating without `new` keyword\n    if (!(this instanceof Grid)) {\n        return new Grid(settings, options);\n    }\n\n    // Nth-Grid Defaults\n    const defaults = {\n        // Layout\n        columns               : [1],\n        gap                   : 0,\n        margin                : 0,\n        direction             : 'ltr',\n        flex                  : true,\n        flex_legacy           : true,\n        float                 : false,\n        float_legacy          : false,\n\n        // Debug\n        debug                 : false,\n        debug_background_color: '#000',\n        debug_text_color      : '#ccc',\n\n        // Overlay\n        overlay               : false,\n        overlay_column_color  : '#7c48c3',\n        overlay_margin_color  : '#dabfff',\n        overlay_text_color    : '#fff',\n\n        // Compilation\n        rem_base              : 16,\n        remove_warnings       : true,\n        warnings              : true\n    };\n\n    // Private defaults\n    const settings_private = {\n        width                 : '100%',\n        order                 : false,\n        auto_width            : null,\n        calc                  : null,\n        columns_ratio         : [],\n        columns_unit          : [],\n        grid_col_ratio        : 0,\n        grid_col_width        : 0,\n        grid_width            : null,\n        gap_h                 : 0,\n        columns_normalized    : [],\n        margin_h              : 0,\n        order_offsets         : [],\n        total_columns         : 0,\n        total_ratio_columns   : 0,\n        total_unit_columns    : 0\n    };\n\n    // Update defaults with global options\n    for (const opt in options) {\n        if (opt in defaults) {\n            defaults[opt] = options[opt];\n        }\n    }\n\n    // Add private properties to settings\n    // Adding these after the global options prevents setting private\n    // settings via CSS or JS globals\n    for (const priv in settings_private) {\n        if (!(priv in settings)) {\n            settings[priv] = settings_private[priv];\n        }\n    }\n\n    // Add missing properties from defaults to settings\n    for (const key in defaults) {\n        if (!(key in settings)) {\n            settings[key] = defaults[key];\n        }\n    }\n\n    // Convert single-value columns layout and order settings to arrays\n    settings.columns = settings.columns instanceof Array ? settings.columns : [settings.columns];\n    settings.order = settings.order instanceof Array ? settings.order : settings.order !== false ? [settings.order] : settings.order;\n\n    // Extract horizontal gap and margin from arrays\n    settings.gap_h = settings.gap instanceof Array ? (settings.gap[1] || settings.gap[0]) : settings.gap;\n    settings.gap_v = settings.gap instanceof Array ? settings.gap[0] : settings.gap;\n    settings.margin_h = settings.margin instanceof Array ? (settings.margin[1] || settings.margin[0]) : settings.margin;\n    settings.margin_v = settings.margin instanceof Array ? settings.margin[0] : settings.margin;\n\n    // Direction\n    settings.dir_left  = settings.direction === 'rtl' ? 'right' : 'left';\n    settings.dir_right = settings.direction === 'rtl' ? 'left' : 'right';\n\n\n    // Populate settings\n    // ---------------------------------------------------------------------\n    let i;\n\n    // Ratio- and unit-based column lists\n    for (i = 0; i < settings.columns.length; i++) {\n        const val = settings.columns[i];\n\n        if (Number(val)) {\n            settings.columns_ratio.push(Number(val));\n        }\n        else {\n            settings.columns_unit.push(val);\n        }\n    }\n\n    // Total column count\n    settings.total_ratio_columns = settings.columns_ratio.length === 1 ? settings.columns_ratio[0] : settings.columns_ratio.length;\n    settings.total_unit_columns  = settings.columns_unit.length;\n    settings.total_columns       = settings.total_ratio_columns + settings.total_unit_columns;\n\n    // Calculate combined grid gap and margin\n    let grid_gaps = unitMath([settings.gap_h, (settings.total_columns - 1)], ' * '),\n        grid_margins = unitMath([settings.margin_h, 2], ' * ');\n\n    // Grid ratio\n    if (settings.columns_ratio.length === 1) {\n        settings.grid_col_ratio = settings.columns_ratio[0];\n    }\n    else {\n        settings.grid_col_ratio = 0;\n\n        // Sum ratio based column values\n        for (i = 0; i < settings.columns_ratio.length; i++) {\n            settings.grid_col_ratio += settings.columns_ratio[i];\n        }\n    }\n\n    // Are all units matched?\n    const isMatched = isUnitMatch([]\n        .concat(settings.width)\n        .concat(settings.columns_unit)\n        .concat(settings.gap)\n        .concat(settings.margin));\n\n    // All all grid units matched?\n    const isMatchedGrid = settings.columns_ratio.length === 0 && isUnitMatch([]\n        .concat(settings.columns_unit)\n        .concat(settings.gap)\n        .concat(settings.margin));\n\n    // Are all grid values percent?\n    const isPercentGrid = isUnitMatch([]\n        .concat(settings.columns_unit)\n        .concat(settings.gap)\n        .concat(settings.margin), '%');\n\n    // Calc() required?\n    settings.calc = !(isMatched || isMatchedGrid || isPercentGrid);\n\n    // Grid container auto width\n    if (settings.columns_ratio.length === 0) {\n        // Calc() required\n        if (settings.calc) {\n            const grid_unit_cols = isUnitMatch(settings.columns_unit) ? unitMath(settings.columns_unit, ' + ') : settings.columns_unit.join(' + ');\n\n            // Matched gap & margin units\n            if (settings.gap_h !== 0 && settings.margin_h !== 0 && isUnitMatch([grid_gaps, grid_margins])) {\n                settings.auto_width = grid_unit_cols + ' + ' + unitMath([grid_gaps, grid_margins], ' + ');\n            }\n            // Matched column and gap units\n            else if (settings.gap_h !== 0 && isUnitMatch([grid_unit_cols, grid_gaps])) {\n                settings.auto_width = unitMath([grid_unit_cols, grid_gaps], ' + ') + ' + ' + (settings.margin_h !== 0 ? grid_margins : '');\n            }\n            // Matched column and margin units\n            else if (settings.margin_h !== 0 && isUnitMatch([grid_unit_cols, grid_margins])) {\n                settings.auto_width = unitMath([grid_unit_cols, grid_margins], ' + ') + ' + ' + (settings.gap_h !== 0 ? grid_gaps : '');\n            }\n            // No match\n            else {\n                settings.auto_width = grid_unit_cols;\n\n                // Add gaps\n                if (settings.gap_h !== 0) {\n                    settings.auto_width += ' + ' + grid_gaps;\n                }\n\n                // Add margins\n                if (settings.margin_h !== 0) {\n                    settings.auto_width += ' + ' + grid_margins;\n                }\n            }\n        }\n        // Calc() not required\n        else {\n            // Unit-based columns\n            settings.auto_width = unitMath(settings.columns_unit, ' + ');\n\n            // Add gaps and margins\n            settings.auto_width = unitMath([settings.auto_width, grid_gaps, grid_margins], ' + ');\n        }\n    }\n\n    // Ratio grid width - Calc() required\n    // Grid width of 99.99% used for sub-pixel rendering bug (e.g. IE9, Chrome < 38)\n    if (settings.calc) {\n        // Single unit-based column\n        if (settings.columns_unit.length === 1) {\n            settings.grid_width = '99.99% - ' + settings.columns_unit[0];\n        }\n        // Multiple unit-based columns\n        else if (settings.columns_unit.length > 1) {\n            // Matched units\n            if (isUnitMatch(settings.columns_unit)) {\n                settings.grid_width = '99.99% - ' + unitMath(settings.columns_unit, ' + ');\n            }\n            // Mixed units\n            else {\n                settings.grid_width = '99.99% - (' + settings.columns_unit.join(' + ') + ')';\n            }\n        }\n        // No unit-based columns\n        else {\n            settings.grid_width = '99.99%';\n        }\n    }\n    // Ratio grid width - Calc() not required\n    else {\n        if (isMatched && getUnit(settings.width) !== '%') {\n            settings.grid_width = settings.width;\n\n            // Subtract unit-based column values from width\n            if (settings.columns_unit.length) {\n                settings.grid_width = unitMath([settings.grid_width, unitMath(settings.columns_unit, ' + ')], ' - ');\n            }\n        }\n        else if (isPercentGrid) {\n            settings.grid_width = '100%';\n\n            // Subtract unit-based column values from width\n            if (settings.columns_unit.length) {\n                settings.grid_width = unitMath([settings.grid_width, unitMath(settings.columns_unit, ' + ')], ' - ');\n            }\n        }\n        else {\n            settings.grid_width = '100%';\n        }\n    }\n\n    // Ratio-based column width\n    if (settings.total_ratio_columns > 0) {\n        // Calc() required\n        if (settings.calc) {\n            // Matched gap and margin units\n            if (settings.gap_h !== 0 && settings.margin_h !== 0 && isUnitMatch([settings.gap_h, settings.margin_h])) {\n                settings.grid_col_width = settings.grid_width + ' - ' + unitMath([grid_gaps, grid_margins], ' + ');\n            }\n            // Matched column and gap units\n            else if (settings.gap_h !== 0 && isUnitMatch([settings.grid_width, grid_gaps])) {\n                settings.grid_col_width = unitMath([settings.grid_width, grid_gaps], ' - ');\n\n                if (grid_margins !== 0) {\n                    settings.grid_col_width += ' - ' + grid_margins;\n                }\n            }\n            // Matched column and margin units\n            else if (settings.margin_h !== 0 && isUnitMatch([settings.grid_width, grid_margins])) {\n                settings.grid_col_width = unitMath([settings.grid_width, grid_margins], ' - ');\n\n                if (grid_gaps !== 0) {\n                    settings.grid_col_width += ' - ' + grid_gaps;\n                }\n            }\n            // No match\n            else {\n                grid_gaps = settings.gap_h !== 0 ? ' - ' + grid_gaps : '';\n                grid_margins = settings.margin_h !== 0 ? ' - ' + grid_margins : '';\n\n                settings.grid_col_width = settings.grid_width + grid_gaps + grid_margins;\n            }\n\n            // Divide by grid ratio\n            settings.grid_col_width = '(' + settings.grid_col_width + ') / ' + settings.grid_col_ratio;\n        }\n        // Calc() not required\n        else {\n            // Calculate grid width without gaps and margins\n            settings.grid_col_width = unitMath([settings.grid_width, grid_gaps, grid_margins], ' - ');\n\n            // Divide by grid ratio\n            settings.grid_col_width = unitMath([settings.grid_col_width, settings.grid_col_ratio], ' / ');\n        }\n    }\n\n    // Calculate ordered column offsets\n    if (settings.order && settings.order.length <= settings.total_columns) {\n        // Expand single ratio-value column to multi-column\n        // Ex: nth-grid(6) /* columns_normalized: 1 1 1 1 1 1 */\n        if (settings.columns_ratio.length === 1) {\n            for (i = 0; i < settings.columns.length; i++) {\n                const col_val = settings.columns[i];\n                const num     = Number(col_val) || false;\n\n                // Single ratio-based value\n                if (num) {\n                    for (let j = 0; j < num; j++) {\n                        settings.columns_normalized.push(1);\n                    }\n                }\n                // Other values\n                else {\n                    settings.columns_normalized.push(col_val);\n                }\n            }\n        }\n        else {\n            settings.columns_normalized = settings.columns;\n        }\n\n        // Loop through order\n        for (i = 0; i < settings.order.length; i++) {\n            let offset    = 0;\n            const order_val = settings.order[i];\n\n            // Get offset of the order column value in the original column layout\n            // Ex: Column 3 offset in original @columns\n            const column_offset = getOrderOffset(settings, order_val);\n\n            // Get offset of the order column number in the ordered column layout\n            // Ex: Column 3 offset in $order 3 2 1 (1st position)\n            const order_offset = getOrderOffset(settings, i + 1, settings.order);\n\n            // Set final offset values in array\n            if (order_offset !== column_offset) {\n                // Calc() required\n                if (settings.calc) {\n                    if (order_offset === 0) {\n                        offset = '0px - (' + column_offset + ')';\n                    }\n                    else if (column_offset === 0) {\n                        offset = order_offset;\n                    }\n                    else {\n                        offset = '(' + order_offset + ') - (' + column_offset + ')';\n                    }\n                }\n                // Calc() not required\n                else {\n                    offset = unitMath([order_offset, column_offset], ' - ');\n                }\n            }\n\n            // Push value to order offset array\n            settings.order_offsets.push(offset);\n        }\n    }\n\n    // Return settings object\n    return settings;\n}\n","// Dependencies\n// =============================================================================\nimport toArray from './to-array';\n\n\n// Exports\n// =============================================================================\n// Converts Less tree object to javascript string, array, boolean, etc.\nexport default function toValue(obj) {\n    // Keyword\n    if (obj.type === 'Keyword') {\n        return obj.value;\n    }\n    // Dimension (number & unit)\n    else if (obj.type === 'Dimension') {\n        // Ignore units for zero values (e.g. 0px = 0);\n        if (obj.value === 0) {\n            return obj.value;\n        }\n        // Append unit to value\n        else {\n            return obj.value.toString().concat(obj.unit);\n        }\n    }\n    // Expression (array)\n    else if (obj.type === 'Expression') {\n        toArray(obj);\n    }\n    // Unknown\n    else {\n        // eslint-disable-next-line\n        console.log(`Unknown type: ${obj.type} Returning value: ${obj.value}`);\n        // eslint-disable-next-line\n        console.log(JSON.stringify(obj));\n\n        return obj;\n    }\n}\n","// Dependencies\n// =============================================================================\nimport toValue from './to-value';\n\n\n// Exports\n// =============================================================================\n// Converts Less tree object to javascript array of values\nexport default function toArray(obj) {\n    if (obj.type === 'Expression') {\n        const arr = [];\n\n        for (let i = 0; i < obj.value.length; i++) {\n            arr.push(toValue(obj.value[i]));\n        }\n\n        return arr;\n    }\n    else {\n        const value = toValue(obj);\n\n        return [value];\n    }\n}\n","/* global tree */\n\n// Dependencies\n// =============================================================================\nimport getNumber from '../../../postcss/util/get-number';\nimport getUnit   from '../../../postcss/util/get-unit';\n\n\n// Exports\n// =============================================================================\n// Converts javascript string, array, boolean, etc. to Less tree object\nexport default function toTree(value) {\n    // Boolean => Keyword\n    if (typeof(value) === 'boolean') {\n        return new tree.Keyword(value.toString());\n    }\n    // Array => Expression\n    else if (value instanceof Array) {\n        const arr = [];\n\n        for (let i = 0; i < value.length; i++) {\n            arr.push(toTree(value[i]));\n        }\n\n        return new tree.Expression(arr);\n    }\n    // Number => Dimension\n    else if (typeof value === 'number') {\n        return new tree.Dimension(value);\n    }\n    // Strings\n    else if (value !== null) {\n        const num  = getNumber(value);\n        const unit = getUnit(value);\n\n        // => Dimension (number & unit)\n        if (num !== false && unit !== false) {\n            return new tree.Dimension(num, unit);\n        }\n        // => Number\n        else if (num !== false) {\n            return new tree.Dimension(num);\n        }\n        // => String\n        else {\n            return new tree.Anonymous(value);\n        }\n    }\n    // Null\n    else {\n        return new tree.Anonymous(value);\n    }\n}\n","/* global functions, tree */\n\n// =============================================================================\n// Less Plugin Documentation (not easy to find, but these links help)\n// =============================================================================\n// Source\n// -----------------------------------------------------------------------------\n// https://github.com/less/less.js/tree/master/lib/less/tree\n// https://github.com/less/less.js/tree/master/test/less/plugin\n\n// Links\n// -----------------------------------------------------------------------------\n// https://github.com/less/less.js/issues/1861\n// https://github.com/less/less-docs/issues/328\n// https://github.com/less/less.js/pull/2479\n// https://github.com/less/less.js/pull/2522\n// https://github.com/less/less.js/issues/1862\n\n// Dependencies\n// =============================================================================\nimport Grid    from '../../postcss/lib/grid';\nimport toArray from './lib/to-array';\nimport toTree  from './lib/to-tree';\nimport toValue from './lib/to-value';\n\n\n// Plugin\n// =============================================================================\nlet settings;\n\nconst api = {\n    // Log message to console\n    'nth-log': function(lessTreeObj) {\n        // eslint-disable-next-line\n        console.log(`Nth-Grid: ${lessTreeObj.value}`);\n\n        return false;\n    },\n    // Log warning message to console\n    'nth-warn': function(lessTreeObj) {\n        // eslint-disable-next-line\n        console.warn(`Nth-Grid: ${lessTreeObj.value}`);\n\n        return false;\n    },\n    // Creates Grid instance\n    'nth-grid': function(columns, gap, margin, width, order) {\n        // Convert Less tree objects to standard JavaScript types\n        settings = {\n            columns: toArray(columns),\n            gap    : toArray(gap),\n            margin : toArray(margin),\n            width  : toValue(width),\n            order  : order.type === 'Expression' ? toArray(order) : false\n        };\n\n        settings = new Grid(settings);\n\n        // Send return value (warning message displayed if not true)\n        return new tree.Keyword('true');\n    },\n    // Returns value from Grid instance\n    'nth-get': function(lessTreeObj) {\n        const key = lessTreeObj.value;\n\n        // Check if key exists\n        if (key in settings) {\n            // Return Less tree object\n            return toTree(settings[key]);\n        }\n        // Invalid key\n        else {\n            // eslint-disable-next-line\n            console.log(`NTH-GRID: ${key} is not a valid key.`);\n        }\n    }\n};\n\n// Add functions to Less registry\nfunctions.addMultiple(api);\n"],"names":["reNotLength","reNumber","reUnit","rounding","value","falseValue","vars","test","match","toString","number","length","Number","unit","stringMath","expression","Function","arr","operator","finalUnit","nums","i","num","getNumber","getUnit","console","log","push","trim","replace","result","join","concat","settings","column","order","offset","sibling_val","calc","offset_vals","sibling_gaps","sibling_ratio_cols","sibling_unit_cols","columns_normalized","gap_h","grid_col_width","column_width","unitMath","matchUnit","Grid","options","this","defaults","columns","gap","margin","direction","flex","flex_legacy","float","float_legacy","debug","debug_background_color","debug_text_color","overlay","overlay_column_color","overlay_margin_color","overlay_text_color","rem_base","remove_warnings","warnings","settings_private","width","auto_width","columns_ratio","columns_unit","grid_col_ratio","grid_width","margin_h","order_offsets","total_columns","total_ratio_columns","total_unit_columns","opt","priv","key","Array","gap_v","margin_v","dir_left","dir_right","val","grid_gaps","grid_margins","isMatched","isUnitMatch","isMatchedGrid","isPercentGrid","grid_unit_cols","col_val","j","order_val","column_offset","getOrderOffset","order_offset","toValue","obj","type","toArray","JSON","stringify","toTree","tree","Keyword","Expression","Dimension","Anonymous","api","lessTreeObj","warn","functions","addMultiple"],"mappings":"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"}