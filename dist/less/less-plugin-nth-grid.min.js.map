{"version":3,"file":"less-plugin-nth-grid.min.js","sources":["../../src/less/plugin/index.js","../../src/postcss/lib/vars.js","../../src/postcss/util/get-number.js","../../src/postcss/util/get-unit.js","../../src/postcss/util/unit-math.js","../../src/postcss/util/get-order-offset.js","../../src/postcss/util/is-unit-match.js","../../src/postcss/lib/grid.js","../../src/less/plugin/lib/to-value.js","../../src/less/plugin/lib/to-array.js","../../src/less/plugin/lib/to-tree.js"],"sourcesContent":["/* global functions, tree */\n\n// =============================================================================\n// Less Plugin Documentation (not easy to find, but these links help)\n// =============================================================================\n// Source\n// -----------------------------------------------------------------------------\n// https://github.com/less/less.js/tree/master/lib/less/tree\n// https://github.com/less/less.js/tree/master/test/less/plugin\n\n// Links\n// -----------------------------------------------------------------------------\n// https://github.com/less/less.js/issues/1861\n// https://github.com/less/less-docs/issues/328\n// https://github.com/less/less.js/pull/2479\n// https://github.com/less/less.js/pull/2522\n// https://github.com/less/less.js/issues/1862\n\n// Dependencies\n// =============================================================================\nimport Grid    from '../../postcss/lib/grid';\nimport toArray from './lib/to-array';\nimport toTree  from './lib/to-tree';\nimport toValue from './lib/to-value';\n\n\n// Plugin\n// =============================================================================\nlet settings;\n\nconst api = {\n    // Log message to console\n    'nth-log': function(lessTreeObj) {\n        // eslint-disable-next-line\n        console.log(`Nth-Grid: ${lessTreeObj.value}`);\n\n        return false;\n    },\n    // Log warning message to console\n    'nth-warn': function(lessTreeObj) {\n        // eslint-disable-next-line\n        console.warn(`Nth-Grid: ${lessTreeObj.value}`);\n\n        return false;\n    },\n    // Creates Grid instance\n    'nth-grid': function(columns, gap, margin, width, order) {\n        // Convert Less tree objects to standard JavaScript types\n        settings = {\n            columns: toArray(columns),\n            gap    : toArray(gap),\n            margin : toArray(margin),\n            width  : toValue(width),\n            order  : order.type === 'Expression' ? toArray(order) : false\n        };\n\n        settings = new Grid(settings);\n\n        // Send return value (warning message displayed if not true)\n        return new tree.Keyword('true');\n    },\n    // Returns value from Grid instance\n    'nth-get': function(lessTreeObj) {\n        const key = lessTreeObj.value;\n\n        // Check if key exists\n        if (key in settings) {\n            // Return Less tree object\n            return toTree(settings[key]);\n        }\n        // Invalid key\n        else {\n            // eslint-disable-next-line\n            console.log(`NTH-GRID: ${key} is not a valid key.`);\n        }\n    }\n};\n\n// Add functions to Less registry\nfunctions.addMultiple(api);\n","// Exports\n// =============================================================================\nexport default {\n    // reNotLength: /[^\\w\\%\\.\\-]/,\n    reNotLength: /[^\\w%.-]/,\n    reNumber   : /^[-+]?[0-9]*\\.?[0-9]+/,\n    reUnit     : /[a-z|%]+$/,\n    rounding   : 5\n};\n","// Dependencies\n// =============================================================================\nimport vars from '../lib/vars';\n\n\n// Exports\n// =============================================================================\n// Get number in string (e.g. '12rem' => 12)\nexport default function(value, falseValue) {\n    if (vars.reNotLength.test(value)) {\n        return false;\n    }\n    else {\n        const match  = value.toString().match(vars.reNumber) || false;\n        const number = match.length ? Number(match) * 1 : falseValue || false;\n\n        return number;\n    }\n}\n","// Dependencies\n// =============================================================================\nimport vars from '../lib/vars';\n\n\n// Exports\n// =============================================================================\n// Get unit in string (e.g. '12rem' => 'rem')\nexport default function(value, falseValue) {\n    if (vars.reNotLength.test(value)) {\n        return false;\n    }\n    else {\n        const match = value.toString().match(vars.reUnit) || false;\n        const unit  = match.length ? match.toString() : falseValue || false;\n\n        return unit;\n    }\n}\n","// Dependencies\n// =============================================================================\nimport getNumber from './get-number';\nimport getUnit   from './get-unit';\n\n\n// Functions\n// =============================================================================\n// Calculates string as mathematical expression. Used instead of eval to avoid\n// console warning on compilation.\nfunction stringMath(expression) {\n    return new Function('return ' + expression)();\n}\n\n\n// Exports\n// =============================================================================\n// Allows for basic math on string lengths (numbers with with units)\n// Ex: unitMath(['1rem', '1rem'], ' + ') /* '2rem' */\nexport default function(arr, operator) {\n    let   finalUnit = '';\n    const nums      = [];\n\n    // Loop through array values\n    for (let i = 0; i < arr.length; i++) {\n        const num  = getNumber(arr[i]);\n        const unit = getUnit(arr[i]);\n\n        // Ignore zero value units\n        if (num !== 0) {\n            // Verify math compatibility and store unit\n            if (unit.length) {\n                if (finalUnit.length && unit !== finalUnit) {\n                    // eslint-disable-next-line\n                    console.log(`NTH-GRID: Incompatible unitMath() arguments: ${arr}`);\n\n                    return 0;\n                }\n                else {\n                    finalUnit = unit;\n                }\n            }\n        }\n\n        // Add item to numbers array\n        nums.push(num);\n    }\n\n    // Cleanse operator\n    operator = operator.trim().replace(/[^+\\-*/().\\d\\s]/g, '');\n\n    // Calculate result\n    const result = nums.length ? stringMath(nums.join(operator)).toString().concat(finalUnit) : 0; // jshint ignore:line\n\n    // Convert zero to number\n    return Number(result) === 0 ? 0 : result;\n}\n","// Dependencies\n// =============================================================================\nimport unitMath from '../util/unit-math';\n\n// Exports\n// =============================================================================\n// Calculates columns offset for source ordering.\n// Note that IE9 truncates css values after 128 characters. Grid columms\n// that require an offset using a calc() string longer than this will\n// not render properly.\nexport default function(settings, column, order) {\n    let offset = 0, i;\n\n    // Only columns following the first need offset calculated\n    if (column > 1) {\n        let sibling_val;\n\n        // Calc() required\n        if (settings.calc) {\n            // Store sibling ratio column and gap counts.\n            // Used to generate the shortest possible calc() strings\n            const offset_vals       = [];\n            let sibling_gaps        = 0;\n            let sibling_ratio_cols  = 0;\n            const sibling_unit_cols = [];\n\n            // Loop through all preceding columns\n            for (i = 0; i < (column - 1); i++) {\n                // Get sibling values from columns_normalized or order\n                if (order) {\n                    sibling_val = settings.columns_normalized[order[i] - 1];\n                }\n                else {\n                    sibling_val = settings.columns_normalized[i];\n                }\n\n                // Gap\n                if (settings.gap_h !== 0) {\n                    sibling_gaps += 1;\n                }\n\n                // Ratio-based value\n                if (Number(sibling_val)) {\n                    sibling_ratio_cols += Number(sibling_val);\n                }\n                // Unit-based value\n                else {\n                    sibling_unit_cols.push(sibling_val);\n                }\n            }\n\n            // Ratio offset\n            if (sibling_ratio_cols > 0) {\n                if (sibling_ratio_cols === 1) {\n                    offset_vals.push(settings.grid_col_width);\n                }\n                else {\n                    offset_vals.push('((' + settings.grid_col_width + ') * ' + sibling_ratio_cols + ')');\n                }\n            }\n\n            // Unit offset\n            if (sibling_unit_cols.length > 0) {\n                offset_vals.push(sibling_unit_cols.join(' + '));\n            }\n\n            // Gap offset\n            if (sibling_gaps > 0) {\n                if (sibling_gaps === 1) {\n                    offset_vals.push(settings.gap_h);\n                }\n                else {\n                    offset_vals.push('(' + settings.gap_h + ' * ' + sibling_gaps + ')');\n                }\n            }\n\n            // Final offset\n            offset = offset_vals.join(' + ');\n        }\n        // Calc() not required\n        else {\n            let column_width;\n\n            // Loop through all preceding columns\n            for (i = 0; i < (column - 1); i++) {\n                // Get sibling values from columns_normalized or order\n                if (order) {\n                    sibling_val = settings.columns_normalized[order[i] - 1];\n                }\n                else {\n                    sibling_val = settings.columns_normalized[i];\n                }\n\n                // Add ratio-based value\n                if (Number(sibling_val)) {\n                    const grid_col_width = settings.grid_col_width;\n\n                    column_width = unitMath([grid_col_width, sibling_val], ' * ');\n                    offset       = unitMath([offset, column_width, settings.gap_h], ' + ');\n                }\n                // Add unit-based value\n                else {\n                    column_width = unitMath([sibling_val, settings.gap_h], ' + ');\n                    offset       = unitMath([offset, column_width], ' + ');\n                }\n            }\n        }\n    }\n\n    return offset;\n}\n","// Dependencies\n// =============================================================================\nimport getNumber from './get-number';\nimport getUnit   from './get-unit';\n\n\n// Exports\n// =============================================================================\n// Compare units of array items, ignoring zero values w/o units\nexport default function(arr, matchUnit) {\n    // Return false if value os not a valid length (e.g. calc)\n    if (!getNumber(arr[0]) && !getUnit(arr[0])) {\n        return false;\n    }\n    // Get matching unit from first item if unspecified\n    else if (!matchUnit) {\n        matchUnit = getUnit(arr[0]);\n    }\n\n    // Loop through array values\n    for (let i = 0; i < arr.length; i++) {\n        const num  = getNumber(arr[i]);\n        const unit = num !== 0 ? getUnit(arr[i]) : false;\n\n        // Return false if value is not a valid length (e.g. calc)\n        if (num === false && unit === false) {\n            return false;\n        }\n        // Return false if units do not match\n        if (num !== 0 && unit !== matchUnit) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","// Dependencies\n// =============================================================================\nimport getOrderOffset from '../util/get-order-offset';\nimport getUnit        from '../util/get-unit';\nimport isUnitMatch    from '../util/is-unit-match';\nimport unitMath       from '../util/unit-math';\n\n\n// Exports\n// =============================================================================\n// Generates new object containing grid properties\nexport default function Grid(settings, options) {\n    options = options || {};\n\n    // Protect against instantiating without `new` keyword\n    if (!(this instanceof Grid)) {\n        return new Grid(settings, options);\n    }\n\n    // Nth-Grid Defaults\n    const defaults = {\n        // Layout\n        columns               : [1],\n        gap                   : 0,\n        margin                : 0,\n        direction             : 'ltr',\n        flex                  : true,\n        flex_legacy           : true,\n        float                 : false,\n        float_legacy          : false,\n\n        // Debug\n        debug                 : false,\n        debug_background_color: '#000',\n        debug_text_color      : '#ccc',\n\n        // Overlay\n        overlay               : false,\n        overlay_column_color  : '#7c48c3',\n        overlay_margin_color  : '#dabfff',\n        overlay_text_color    : '#fff',\n\n        // Compilation\n        rem_base              : 16,\n        remove_warnings       : true,\n        warnings              : true\n    };\n\n    // Private defaults\n    const settings_private = {\n        width                 : '100%',\n        order                 : false,\n        auto_width            : null,\n        calc                  : null,\n        columns_ratio         : [],\n        columns_unit          : [],\n        grid_col_ratio        : 0,\n        grid_col_width        : 0,\n        grid_width            : null,\n        gap_h                 : 0,\n        columns_normalized    : [],\n        margin_h              : 0,\n        order_offsets         : [],\n        total_columns         : 0,\n        total_ratio_columns   : 0,\n        total_unit_columns    : 0\n    };\n\n    // Update defaults with global options\n    for (const opt in options) {\n        if (opt in defaults) {\n            defaults[opt] = options[opt];\n        }\n    }\n\n    // Add private properties to settings\n    // Adding these after the global options prevents setting private\n    // settings via CSS or JS globals\n    for (const priv in settings_private) {\n        if (!(priv in settings)) {\n            settings[priv] = settings_private[priv];\n        }\n    }\n\n    // Add missing properties from defaults to settings\n    for (const key in defaults) {\n        if (!(key in settings)) {\n            settings[key] = defaults[key];\n        }\n    }\n\n    // Convert single-value columns layout and order settings to arrays\n    settings.columns = settings.columns instanceof Array ? settings.columns : [settings.columns];\n    settings.order = settings.order instanceof Array ? settings.order : settings.order !== false ? [settings.order] : settings.order;\n\n    // Extract horizontal gap and margin from arrays\n    settings.gap_h = settings.gap instanceof Array ? (settings.gap[1] || settings.gap[0]) : settings.gap;\n    settings.gap_v = settings.gap instanceof Array ? settings.gap[0] : settings.gap;\n    settings.margin_h = settings.margin instanceof Array ? (settings.margin[1] || settings.margin[0]) : settings.margin;\n    settings.margin_v = settings.margin instanceof Array ? settings.margin[0] : settings.margin;\n\n    // Direction\n    settings.dir_left  = settings.direction === 'rtl' ? 'right' : 'left';\n    settings.dir_right = settings.direction === 'rtl' ? 'left' : 'right';\n\n\n    // Populate settings\n    // ---------------------------------------------------------------------\n    let i;\n\n    // Ratio- and unit-based column lists\n    for (i = 0; i < settings.columns.length; i++) {\n        const val = settings.columns[i];\n\n        if (Number(val)) {\n            settings.columns_ratio.push(Number(val));\n        }\n        else {\n            settings.columns_unit.push(val);\n        }\n    }\n\n    // Total column count\n    settings.total_ratio_columns = settings.columns_ratio.length === 1 ? settings.columns_ratio[0] : settings.columns_ratio.length;\n    settings.total_unit_columns  = settings.columns_unit.length;\n    settings.total_columns       = settings.total_ratio_columns + settings.total_unit_columns;\n\n    // Calculate combined grid gap and margin\n    let grid_gaps = unitMath([settings.gap_h, (settings.total_columns - 1)], ' * '),\n        grid_margins = unitMath([settings.margin_h, 2], ' * ');\n\n    // Grid ratio\n    if (settings.columns_ratio.length === 1) {\n        settings.grid_col_ratio = settings.columns_ratio[0];\n    }\n    else {\n        settings.grid_col_ratio = 0;\n\n        // Sum ratio based column values\n        for (i = 0; i < settings.columns_ratio.length; i++) {\n            settings.grid_col_ratio += settings.columns_ratio[i];\n        }\n    }\n\n    // Are all units matched?\n    const isMatched = isUnitMatch([]\n        .concat(settings.width)\n        .concat(settings.columns_unit)\n        .concat(settings.gap)\n        .concat(settings.margin));\n\n    // All all grid units matched?\n    const isMatchedGrid = settings.columns_ratio.length === 0 && isUnitMatch([]\n        .concat(settings.columns_unit)\n        .concat(settings.gap)\n        .concat(settings.margin));\n\n    // Are all grid values percent?\n    const isPercentGrid = isUnitMatch([]\n        .concat(settings.columns_unit)\n        .concat(settings.gap)\n        .concat(settings.margin), '%');\n\n    // Calc() required?\n    settings.calc = !(isMatched || isMatchedGrid || isPercentGrid);\n\n    // Grid container auto width\n    if (settings.columns_ratio.length === 0) {\n        // Calc() required\n        if (settings.calc) {\n            const grid_unit_cols = isUnitMatch(settings.columns_unit) ? unitMath(settings.columns_unit, ' + ') : settings.columns_unit.join(' + ');\n\n            // Matched gap & margin units\n            if (settings.gap_h !== 0 && settings.margin_h !== 0 && isUnitMatch([grid_gaps, grid_margins])) {\n                settings.auto_width = grid_unit_cols + ' + ' + unitMath([grid_gaps, grid_margins], ' + ');\n            }\n            // Matched column and gap units\n            else if (settings.gap_h !== 0 && isUnitMatch([grid_unit_cols, grid_gaps])) {\n                settings.auto_width = unitMath([grid_unit_cols, grid_gaps], ' + ') + ' + ' + (settings.margin_h !== 0 ? grid_margins : '');\n            }\n            // Matched column and margin units\n            else if (settings.margin_h !== 0 && isUnitMatch([grid_unit_cols, grid_margins])) {\n                settings.auto_width = unitMath([grid_unit_cols, grid_margins], ' + ') + ' + ' + (settings.gap_h !== 0 ? grid_gaps : '');\n            }\n            // No match\n            else {\n                settings.auto_width = grid_unit_cols;\n\n                // Add gaps\n                if (settings.gap_h !== 0) {\n                    settings.auto_width += ' + ' + grid_gaps;\n                }\n\n                // Add margins\n                if (settings.margin_h !== 0) {\n                    settings.auto_width += ' + ' + grid_margins;\n                }\n            }\n        }\n        // Calc() not required\n        else {\n            // Unit-based columns\n            settings.auto_width = unitMath(settings.columns_unit, ' + ');\n\n            // Add gaps and margins\n            settings.auto_width = unitMath([settings.auto_width, grid_gaps, grid_margins], ' + ');\n        }\n    }\n\n    // Ratio grid width - Calc() required\n    // Grid width of 99.99% used for sub-pixel rendering bug (e.g. IE9, Chrome < 38)\n    if (settings.calc) {\n        // Single unit-based column\n        if (settings.columns_unit.length === 1) {\n            settings.grid_width = '99.99% - ' + settings.columns_unit[0];\n        }\n        // Multiple unit-based columns\n        else if (settings.columns_unit.length > 1) {\n            // Matched units\n            if (isUnitMatch(settings.columns_unit)) {\n                settings.grid_width = '99.99% - ' + unitMath(settings.columns_unit, ' + ');\n            }\n            // Mixed units\n            else {\n                settings.grid_width = '99.99% - (' + settings.columns_unit.join(' + ') + ')';\n            }\n        }\n        // No unit-based columns\n        else {\n            settings.grid_width = '99.99%';\n        }\n    }\n    // Ratio grid width - Calc() not required\n    else {\n        if (isMatched && getUnit(settings.width) !== '%') {\n            settings.grid_width = settings.width;\n\n            // Subtract unit-based column values from width\n            if (settings.columns_unit.length) {\n                settings.grid_width = unitMath([settings.grid_width, unitMath(settings.columns_unit, ' + ')], ' - ');\n            }\n        }\n        else if (isPercentGrid) {\n            settings.grid_width = '100%';\n\n            // Subtract unit-based column values from width\n            if (settings.columns_unit.length) {\n                settings.grid_width = unitMath([settings.grid_width, unitMath(settings.columns_unit, ' + ')], ' - ');\n            }\n        }\n        else {\n            settings.grid_width = '100%';\n        }\n    }\n\n    // Ratio-based column width\n    if (settings.total_ratio_columns > 0) {\n        // Calc() required\n        if (settings.calc) {\n            // Matched gap and margin units\n            if (settings.gap_h !== 0 && settings.margin_h !== 0 && isUnitMatch([settings.gap_h, settings.margin_h])) {\n                settings.grid_col_width = settings.grid_width + ' - ' + unitMath([grid_gaps, grid_margins], ' + ');\n            }\n            // Matched column and gap units\n            else if (settings.gap_h !== 0 && isUnitMatch([settings.grid_width, grid_gaps])) {\n                settings.grid_col_width = unitMath([settings.grid_width, grid_gaps], ' - ');\n\n                if (grid_margins !== 0) {\n                    settings.grid_col_width += ' - ' + grid_margins;\n                }\n            }\n            // Matched column and margin units\n            else if (settings.margin_h !== 0 && isUnitMatch([settings.grid_width, grid_margins])) {\n                settings.grid_col_width = unitMath([settings.grid_width, grid_margins], ' - ');\n\n                if (grid_gaps !== 0) {\n                    settings.grid_col_width += ' - ' + grid_gaps;\n                }\n            }\n            // No match\n            else {\n                grid_gaps = settings.gap_h !== 0 ? ' - ' + grid_gaps : '';\n                grid_margins = settings.margin_h !== 0 ? ' - ' + grid_margins : '';\n\n                settings.grid_col_width = settings.grid_width + grid_gaps + grid_margins;\n            }\n\n            // Divide by grid ratio\n            settings.grid_col_width = '(' + settings.grid_col_width + ') / ' + settings.grid_col_ratio;\n        }\n        // Calc() not required\n        else {\n            // Calculate grid width without gaps and margins\n            settings.grid_col_width = unitMath([settings.grid_width, grid_gaps, grid_margins], ' - ');\n\n            // Divide by grid ratio\n            settings.grid_col_width = unitMath([settings.grid_col_width, settings.grid_col_ratio], ' / ');\n        }\n    }\n\n    // Calculate ordered column offsets\n    if (settings.order && settings.order.length <= settings.total_columns) {\n        // Expand single ratio-value column to multi-column\n        // Ex: nth-grid(6) /* columns_normalized: 1 1 1 1 1 1 */\n        if (settings.columns_ratio.length === 1) {\n            for (i = 0; i < settings.columns.length; i++) {\n                const col_val = settings.columns[i];\n                const num     = Number(col_val) || false;\n\n                // Single ratio-based value\n                if (num) {\n                    for (let j = 0; j < num; j++) {\n                        settings.columns_normalized.push(1);\n                    }\n                }\n                // Other values\n                else {\n                    settings.columns_normalized.push(col_val);\n                }\n            }\n        }\n        else {\n            settings.columns_normalized = settings.columns;\n        }\n\n        // Loop through order\n        for (i = 0; i < settings.order.length; i++) {\n            let offset    = 0;\n            const order_val = settings.order[i];\n\n            // Get offset of the order column value in the original column layout\n            // Ex: Column 3 offset in original @columns\n            const column_offset = getOrderOffset(settings, order_val);\n\n            // Get offset of the order column number in the ordered column layout\n            // Ex: Column 3 offset in $order 3 2 1 (1st position)\n            const order_offset = getOrderOffset(settings, i + 1, settings.order);\n\n            // Set final offset values in array\n            if (order_offset !== column_offset) {\n                // Calc() required\n                if (settings.calc) {\n                    if (order_offset === 0) {\n                        offset = '0px - (' + column_offset + ')';\n                    }\n                    else if (column_offset === 0) {\n                        offset = order_offset;\n                    }\n                    else {\n                        offset = '(' + order_offset + ') - (' + column_offset + ')';\n                    }\n                }\n                // Calc() not required\n                else {\n                    offset = unitMath([order_offset, column_offset], ' - ');\n                }\n            }\n\n            // Push value to order offset array\n            settings.order_offsets.push(offset);\n        }\n    }\n\n    // Return settings object\n    return settings;\n}\n","// Dependencies\n// =============================================================================\nimport toArray from './to-array';\n\n\n// Exports\n// =============================================================================\n// Converts Less tree object to javascript string, array, boolean, etc.\nexport default function toValue(obj) {\n    // Keyword\n    if (obj.type === 'Keyword') {\n        return obj.value;\n    }\n    // Dimension (number & unit)\n    else if (obj.type === 'Dimension') {\n        // Ignore units for zero values (e.g. 0px = 0);\n        if (obj.value === 0) {\n            return obj.value;\n        }\n        // Append unit to value\n        else {\n            return obj.value.toString().concat(obj.unit);\n        }\n    }\n    // Expression (array)\n    else if (obj.type === 'Expression') {\n        toArray(obj);\n    }\n    // Unknown\n    else {\n        // eslint-disable-next-line\n        console.log(`Unknown type: ${obj.type} Returning value: ${obj.value}`);\n        // eslint-disable-next-line\n        console.log(JSON.stringify(obj));\n\n        return obj;\n    }\n}\n","// Dependencies\n// =============================================================================\nimport toValue from './to-value';\n\n\n// Exports\n// =============================================================================\n// Converts Less tree object to javascript array of values\nexport default function toArray(obj) {\n    if (obj.type === 'Expression') {\n        const arr = [];\n\n        for (let i = 0; i < obj.value.length; i++) {\n            arr.push(toValue(obj.value[i]));\n        }\n\n        return arr;\n    }\n    else {\n        const value = toValue(obj);\n\n        return [value];\n    }\n}\n","/* global tree */\n\n// Dependencies\n// =============================================================================\nimport getNumber from '../../../postcss/util/get-number';\nimport getUnit   from '../../../postcss/util/get-unit';\n\n\n// Exports\n// =============================================================================\n// Converts javascript string, array, boolean, etc. to Less tree object\nexport default function toTree(value) {\n    // Boolean => Keyword\n    if (typeof(value) === 'boolean') {\n        return new tree.Keyword(value.toString());\n    }\n    // Array => Expression\n    else if (value instanceof Array) {\n        const arr = [];\n\n        for (let i = 0; i < value.length; i++) {\n            arr.push(toTree(value[i]));\n        }\n\n        return new tree.Expression(arr);\n    }\n    // Number => Dimension\n    else if (typeof value === 'number') {\n        return new tree.Dimension(value);\n    }\n    // Strings\n    else if (value !== null) {\n        const num  = getNumber(value);\n        const unit = getUnit(value);\n\n        // => Dimension (number & unit)\n        if (num !== false && unit !== false) {\n            return new tree.Dimension(num, unit);\n        }\n        // => Number\n        else if (num !== false) {\n            return new tree.Dimension(num);\n        }\n        // => String\n        else {\n            return new tree.Anonymous(value);\n        }\n    }\n    // Null\n    else {\n        return new tree.Anonymous(value);\n    }\n}\n"],"names":["settings","reNotLength","reNumber","reUnit","rounding","value","falseValue","vars","test","match","toString","length","Number","arr","operator","finalUnit","nums","i","num","getNumber","unit","getUnit","console","log","push","trim","replace","expression","result","join","Function","concat","column","order","sibling_val","offset","calc","offset_vals","sibling_gaps","sibling_ratio_cols","sibling_unit_cols","columns_normalized","gap_h","grid_col_width","column_width","unitMath","matchUnit","Grid","options","this","defaults","columns","gap","margin","direction","flex","flex_legacy","float","float_legacy","debug","debug_background_color","debug_text_color","overlay","overlay_column_color","overlay_margin_color","overlay_text_color","rem_base","remove_warnings","warnings","settings_private","width","auto_width","columns_ratio","columns_unit","grid_col_ratio","grid_width","margin_h","order_offsets","total_columns","total_ratio_columns","total_unit_columns","opt","priv","key","Array","gap_v","margin_v","dir_left","dir_right","val","grid_gaps","grid_margins","isMatched","isUnitMatch","isMatchedGrid","isPercentGrid","grid_unit_cols","col_val","j","column_offset","getOrderOffset","order_offset","toValue","obj","type","JSON","stringify","toArray","toTree","tree","Keyword","Expression","Dimension","Anonymous","api","lessTreeObj","warn","functions","addMultiple"],"mappings":"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"}